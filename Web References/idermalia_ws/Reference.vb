'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2443
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Runtime.Serialization
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml
Imports System.Xml.Serialization

'
'Microsoft.VSDesigner generó automáticamente este código fuente, versión=1.1.4322.2443.
'
Namespace idermalia_ws
    
    '<remarks/>
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="Service1Soap", [Namespace]:="http://tempuri.org/WS_IDERMALIA/Service1")>  _
    Public Class Service1
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        '<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "http://www.idermalia.com/WS_IDERMALIA/Service1.asmx"
        End Sub
        
        '<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_IDERMALIA/Service1/AltaCita", RequestNamespace:="http://tempuri.org/WS_IDERMALIA/Service1", ResponseNamespace:="http://tempuri.org/WS_IDERMALIA/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AltaCita(ByVal login As String, ByVal password As String, ByVal ds_cita As ds_cita) As Integer
            Dim results() As Object = Me.Invoke("AltaCita", New Object() {login, password, ds_cita})
            Return CType(results(0),Integer)
        End Function
        
        '<remarks/>
        Public Function BeginAltaCita(ByVal login As String, ByVal password As String, ByVal ds_cita As ds_cita, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AltaCita", New Object() {login, password, ds_cita}, callback, asyncState)
        End Function
        
        '<remarks/>
        Public Function EndAltaCita(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_IDERMALIA/Service1/BajaCita", RequestNamespace:="http://tempuri.org/WS_IDERMALIA/Service1", ResponseNamespace:="http://tempuri.org/WS_IDERMALIA/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BajaCita(ByVal login As String, ByVal password As String, ByVal ds_baja_cita As ds_baja_cita) As String
            Dim results() As Object = Me.Invoke("BajaCita", New Object() {login, password, ds_baja_cita})
            Return CType(results(0),String)
        End Function
        
        '<remarks/>
        Public Function BeginBajaCita(ByVal login As String, ByVal password As String, ByVal ds_baja_cita As ds_baja_cita, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("BajaCita", New Object() {login, password, ds_baja_cita}, callback, asyncState)
        End Function
        
        '<remarks/>
        Public Function EndBajaCita(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
    End Class
    
    <Serializable(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Diagnostics.DebuggerStepThrough(),  _
     System.ComponentModel.ToolboxItem(true)>  _
    Public Class ds_cita
        Inherits DataSet
        
        Private tablecita As citaDataTable
        
        Private tablepers As persDataTable
        
        Private relationperscita As DataRelation
        
        Public Sub New()
            MyBase.New
            Me.InitClass
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
            MyBase.New
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
            If (Not (strSchema) Is Nothing) Then
                Dim ds As DataSet = New DataSet
                ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("cita")) Is Nothing) Then
                    Me.Tables.Add(New citaDataTable(ds.Tables("cita")))
                End If
                If (Not (ds.Tables("pers")) Is Nothing) Then
                    Me.Tables.Add(New persDataTable(ds.Tables("pers")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.InitClass
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        <System.ComponentModel.Browsable(false),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property cita As citaDataTable
            Get
                Return Me.tablecita
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property pers As persDataTable
            Get
                Return Me.tablepers
            End Get
        End Property
        
        Public Overrides Function Clone() As DataSet
            Dim cln As ds_cita = CType(MyBase.Clone,ds_cita)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
            Me.Reset
            Dim ds As DataSet = New DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("cita")) Is Nothing) Then
                Me.Tables.Add(New citaDataTable(ds.Tables("cita")))
            End If
            If (Not (ds.Tables("pers")) Is Nothing) Then
                Me.Tables.Add(New persDataTable(ds.Tables("pers")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        End Sub
        
        Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
            Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
            Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
        End Function
        
        Friend Sub InitVars()
            Me.tablecita = CType(Me.Tables("cita"),citaDataTable)
            If (Not (Me.tablecita) Is Nothing) Then
                Me.tablecita.InitVars
            End If
            Me.tablepers = CType(Me.Tables("pers"),persDataTable)
            If (Not (Me.tablepers) Is Nothing) Then
                Me.tablepers.InitVars
            End If
            Me.relationperscita = Me.Relations("perscita")
        End Sub
        
        Private Sub InitClass()
            Me.DataSetName = "ds_cita"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/ds_cita.xsd"
            Me.Locale = New System.Globalization.CultureInfo("en-US")
            Me.CaseSensitive = false
            Me.EnforceConstraints = true
            Me.tablecita = New citaDataTable
            Me.Tables.Add(Me.tablecita)
            Me.tablepers = New persDataTable
            Me.Tables.Add(Me.tablepers)
            Dim fkc As ForeignKeyConstraint
            fkc = New ForeignKeyConstraint("perscita", New DataColumn() {Me.tablepers.pers_keyColumn}, New DataColumn() {Me.tablecita.pers_keyColumn})
            Me.tablecita.Constraints.Add(fkc)
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
            fkc.DeleteRule = System.Data.Rule.Cascade
            fkc.UpdateRule = System.Data.Rule.Cascade
            Me.relationperscita = New DataRelation("perscita", New DataColumn() {Me.tablepers.pers_keyColumn}, New DataColumn() {Me.tablecita.pers_keyColumn}, false)
            Me.Relations.Add(Me.relationperscita)
        End Sub
        
        Private Function ShouldSerializecita() As Boolean
            Return false
        End Function
        
        Private Function ShouldSerializepers() As Boolean
            Return false
        End Function
        
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        Public Delegate Sub citaRowChangeEventHandler(ByVal sender As Object, ByVal e As citaRowChangeEvent)
        
        Public Delegate Sub persRowChangeEventHandler(ByVal sender As Object, ByVal e As persRowChangeEvent)
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class citaDataTable
            Inherits DataTable
            Implements System.Collections.IEnumerable
            
            Private columnid_centro As DataColumn
            
            Private columnagencode As DataColumn
            
            Private columnid_prestacion As DataColumn
            
            Private columndia As DataColumn
            
            Private columnhora_ini As DataColumn
            
            Private columnhora_fin As DataColumn
            
            Private columnid_garante As DataColumn
            
            Private columnpers_key As DataColumn
            
            Private columnid_agen_franja As DataColumn
            
            Private columnepis_key As DataColumn
            
            Friend Sub New()
                MyBase.New("cita")
                Me.InitClass
            End Sub
            
            Friend Sub New(ByVal table As DataTable)
                MyBase.New(table.TableName)
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
                Me.DisplayExpression = table.DisplayExpression
            End Sub
            
            <System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            Friend ReadOnly Property id_centroColumn As DataColumn
                Get
                    Return Me.columnid_centro
                End Get
            End Property
            
            Friend ReadOnly Property agencodeColumn As DataColumn
                Get
                    Return Me.columnagencode
                End Get
            End Property
            
            Friend ReadOnly Property id_prestacionColumn As DataColumn
                Get
                    Return Me.columnid_prestacion
                End Get
            End Property
            
            Friend ReadOnly Property diaColumn As DataColumn
                Get
                    Return Me.columndia
                End Get
            End Property
            
            Friend ReadOnly Property hora_iniColumn As DataColumn
                Get
                    Return Me.columnhora_ini
                End Get
            End Property
            
            Friend ReadOnly Property hora_finColumn As DataColumn
                Get
                    Return Me.columnhora_fin
                End Get
            End Property
            
            Friend ReadOnly Property id_garanteColumn As DataColumn
                Get
                    Return Me.columnid_garante
                End Get
            End Property
            
            Friend ReadOnly Property pers_keyColumn As DataColumn
                Get
                    Return Me.columnpers_key
                End Get
            End Property
            
            Friend ReadOnly Property id_agen_franjaColumn As DataColumn
                Get
                    Return Me.columnid_agen_franja
                End Get
            End Property
            
            Friend ReadOnly Property epis_keyColumn As DataColumn
                Get
                    Return Me.columnepis_key
                End Get
            End Property
            
            Public Default ReadOnly Property Item(ByVal index As Integer) As citaRow
                Get
                    Return CType(Me.Rows(index),citaRow)
                End Get
            End Property
            
            Public Event citaRowChanged As citaRowChangeEventHandler
            
            Public Event citaRowChanging As citaRowChangeEventHandler
            
            Public Event citaRowDeleted As citaRowChangeEventHandler
            
            Public Event citaRowDeleting As citaRowChangeEventHandler
            
            Public Overloads Sub AddcitaRow(ByVal row As citaRow)
                Me.Rows.Add(row)
            End Sub
            
            Public Overloads Function AddcitaRow(ByVal id_centro As Integer, ByVal agencode As String, ByVal id_prestacion As Integer, ByVal dia As Date, ByVal hora_ini As Date, ByVal hora_fin As Date, ByVal id_garante As Integer, ByVal parentpersRowByperscita As persRow, ByVal id_agen_franja As Integer, ByVal epis_key As Integer) As citaRow
                Dim rowcitaRow As citaRow = CType(Me.NewRow,citaRow)
                rowcitaRow.ItemArray = New Object() {id_centro, agencode, id_prestacion, dia, hora_ini, hora_fin, id_garante, parentpersRowByperscita(0), id_agen_franja, epis_key}
                Me.Rows.Add(rowcitaRow)
                Return rowcitaRow
            End Function
            
            Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            Public Overrides Function Clone() As DataTable
                Dim cln As citaDataTable = CType(MyBase.Clone,citaDataTable)
                cln.InitVars
                Return cln
            End Function
            
            Protected Overrides Function CreateInstance() As DataTable
                Return New citaDataTable
            End Function
            
            Friend Sub InitVars()
                Me.columnid_centro = Me.Columns("id_centro")
                Me.columnagencode = Me.Columns("agencode")
                Me.columnid_prestacion = Me.Columns("id_prestacion")
                Me.columndia = Me.Columns("dia")
                Me.columnhora_ini = Me.Columns("hora_ini")
                Me.columnhora_fin = Me.Columns("hora_fin")
                Me.columnid_garante = Me.Columns("id_garante")
                Me.columnpers_key = Me.Columns("pers_key")
                Me.columnid_agen_franja = Me.Columns("id_agen_franja")
                Me.columnepis_key = Me.Columns("epis_key")
            End Sub
            
            Private Sub InitClass()
                Me.columnid_centro = New DataColumn("id_centro", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnid_centro)
                Me.columnagencode = New DataColumn("agencode", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnagencode)
                Me.columnid_prestacion = New DataColumn("id_prestacion", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnid_prestacion)
                Me.columndia = New DataColumn("dia", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columndia)
                Me.columnhora_ini = New DataColumn("hora_ini", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnhora_ini)
                Me.columnhora_fin = New DataColumn("hora_fin", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnhora_fin)
                Me.columnid_garante = New DataColumn("id_garante", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnid_garante)
                Me.columnpers_key = New DataColumn("pers_key", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnpers_key)
                Me.columnid_agen_franja = New DataColumn("id_agen_franja", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnid_agen_franja)
                Me.columnepis_key = New DataColumn("epis_key", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnepis_key)
            End Sub
            
            Public Function NewcitaRow() As citaRow
                Return CType(Me.NewRow,citaRow)
            End Function
            
            Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
                Return New citaRow(builder)
            End Function
            
            Protected Overrides Function GetRowType() As System.Type
                Return GetType(citaRow)
            End Function
            
            Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.citaRowChangedEvent) Is Nothing) Then
                    RaiseEvent citaRowChanged(Me, New citaRowChangeEvent(CType(e.Row,citaRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.citaRowChangingEvent) Is Nothing) Then
                    RaiseEvent citaRowChanging(Me, New citaRowChangeEvent(CType(e.Row,citaRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.citaRowDeletedEvent) Is Nothing) Then
                    RaiseEvent citaRowDeleted(Me, New citaRowChangeEvent(CType(e.Row,citaRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.citaRowDeletingEvent) Is Nothing) Then
                    RaiseEvent citaRowDeleting(Me, New citaRowChangeEvent(CType(e.Row,citaRow), e.Action))
                End If
            End Sub
            
            Public Sub RemovecitaRow(ByVal row As citaRow)
                Me.Rows.Remove(row)
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class citaRow
            Inherits DataRow
            
            Private tablecita As citaDataTable
            
            Friend Sub New(ByVal rb As DataRowBuilder)
                MyBase.New(rb)
                Me.tablecita = CType(Me.Table,citaDataTable)
            End Sub
            
            Public Property id_centro As Integer
                Get
                    Try 
                        Return CType(Me(Me.tablecita.id_centroColumn),Integer)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablecita.id_centroColumn) = value
                End Set
            End Property
            
            Public Property agencode As String
                Get
                    Try 
                        Return CType(Me(Me.tablecita.agencodeColumn),String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablecita.agencodeColumn) = value
                End Set
            End Property
            
            Public Property id_prestacion As Integer
                Get
                    Try 
                        Return CType(Me(Me.tablecita.id_prestacionColumn),Integer)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablecita.id_prestacionColumn) = value
                End Set
            End Property
            
            Public Property dia As Date
                Get
                    Try 
                        Return CType(Me(Me.tablecita.diaColumn),Date)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablecita.diaColumn) = value
                End Set
            End Property
            
            Public Property hora_ini As Date
                Get
                    Try 
                        Return CType(Me(Me.tablecita.hora_iniColumn),Date)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablecita.hora_iniColumn) = value
                End Set
            End Property
            
            Public Property hora_fin As Date
                Get
                    Try 
                        Return CType(Me(Me.tablecita.hora_finColumn),Date)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablecita.hora_finColumn) = value
                End Set
            End Property
            
            Public Property id_garante As Integer
                Get
                    Try 
                        Return CType(Me(Me.tablecita.id_garanteColumn),Integer)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablecita.id_garanteColumn) = value
                End Set
            End Property
            
            Public Property pers_key As Integer
                Get
                    Try 
                        Return CType(Me(Me.tablecita.pers_keyColumn),Integer)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablecita.pers_keyColumn) = value
                End Set
            End Property
            
            Public Property id_agen_franja As Integer
                Get
                    Try 
                        Return CType(Me(Me.tablecita.id_agen_franjaColumn),Integer)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablecita.id_agen_franjaColumn) = value
                End Set
            End Property
            
            Public Property epis_key As Integer
                Get
                    Try 
                        Return CType(Me(Me.tablecita.epis_keyColumn),Integer)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablecita.epis_keyColumn) = value
                End Set
            End Property
            
            Public Property persRow As persRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("perscita")),persRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("perscita"))
                End Set
            End Property
            
            Public Function Isid_centroNull() As Boolean
                Return Me.IsNull(Me.tablecita.id_centroColumn)
            End Function
            
            Public Sub Setid_centroNull()
                Me(Me.tablecita.id_centroColumn) = System.Convert.DBNull
            End Sub
            
            Public Function IsagencodeNull() As Boolean
                Return Me.IsNull(Me.tablecita.agencodeColumn)
            End Function
            
            Public Sub SetagencodeNull()
                Me(Me.tablecita.agencodeColumn) = System.Convert.DBNull
            End Sub
            
            Public Function Isid_prestacionNull() As Boolean
                Return Me.IsNull(Me.tablecita.id_prestacionColumn)
            End Function
            
            Public Sub Setid_prestacionNull()
                Me(Me.tablecita.id_prestacionColumn) = System.Convert.DBNull
            End Sub
            
            Public Function IsdiaNull() As Boolean
                Return Me.IsNull(Me.tablecita.diaColumn)
            End Function
            
            Public Sub SetdiaNull()
                Me(Me.tablecita.diaColumn) = System.Convert.DBNull
            End Sub
            
            Public Function Ishora_iniNull() As Boolean
                Return Me.IsNull(Me.tablecita.hora_iniColumn)
            End Function
            
            Public Sub Sethora_iniNull()
                Me(Me.tablecita.hora_iniColumn) = System.Convert.DBNull
            End Sub
            
            Public Function Ishora_finNull() As Boolean
                Return Me.IsNull(Me.tablecita.hora_finColumn)
            End Function
            
            Public Sub Sethora_finNull()
                Me(Me.tablecita.hora_finColumn) = System.Convert.DBNull
            End Sub
            
            Public Function Isid_garanteNull() As Boolean
                Return Me.IsNull(Me.tablecita.id_garanteColumn)
            End Function
            
            Public Sub Setid_garanteNull()
                Me(Me.tablecita.id_garanteColumn) = System.Convert.DBNull
            End Sub
            
            Public Function Ispers_keyNull() As Boolean
                Return Me.IsNull(Me.tablecita.pers_keyColumn)
            End Function
            
            Public Sub Setpers_keyNull()
                Me(Me.tablecita.pers_keyColumn) = System.Convert.DBNull
            End Sub
            
            Public Function Isid_agen_franjaNull() As Boolean
                Return Me.IsNull(Me.tablecita.id_agen_franjaColumn)
            End Function
            
            Public Sub Setid_agen_franjaNull()
                Me(Me.tablecita.id_agen_franjaColumn) = System.Convert.DBNull
            End Sub
            
            Public Function Isepis_keyNull() As Boolean
                Return Me.IsNull(Me.tablecita.epis_keyColumn)
            End Function
            
            Public Sub Setepis_keyNull()
                Me(Me.tablecita.epis_keyColumn) = System.Convert.DBNull
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class citaRowChangeEvent
            Inherits EventArgs
            
            Private eventRow As citaRow
            
            Private eventAction As DataRowAction
            
            Public Sub New(ByVal row As citaRow, ByVal action As DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            Public ReadOnly Property Row As citaRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            Public ReadOnly Property Action As DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class persDataTable
            Inherits DataTable
            Implements System.Collections.IEnumerable
            
            Private columnpers_key As DataColumn
            
            Private columnperssur1 As DataColumn
            
            Private columnperssur2 As DataColumn
            
            Private columnpersname As DataColumn
            
            Private columntsexcode As DataColumn
            
            Private columnpersfullname As DataColumn
            
            Private columnidenperscod1 As DataColumn
            
            Private columnpersidencod1 As DataColumn
            
            Private columnmovil As DataColumn
            
            Private columnfecha_nacimiento As DataColumn
            
            Friend Sub New()
                MyBase.New("pers")
                Me.InitClass
            End Sub
            
            Friend Sub New(ByVal table As DataTable)
                MyBase.New(table.TableName)
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
                Me.DisplayExpression = table.DisplayExpression
            End Sub
            
            <System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            Friend ReadOnly Property pers_keyColumn As DataColumn
                Get
                    Return Me.columnpers_key
                End Get
            End Property
            
            Friend ReadOnly Property perssur1Column As DataColumn
                Get
                    Return Me.columnperssur1
                End Get
            End Property
            
            Friend ReadOnly Property perssur2Column As DataColumn
                Get
                    Return Me.columnperssur2
                End Get
            End Property
            
            Friend ReadOnly Property persnameColumn As DataColumn
                Get
                    Return Me.columnpersname
                End Get
            End Property
            
            Friend ReadOnly Property tsexcodeColumn As DataColumn
                Get
                    Return Me.columntsexcode
                End Get
            End Property
            
            Friend ReadOnly Property persfullnameColumn As DataColumn
                Get
                    Return Me.columnpersfullname
                End Get
            End Property
            
            Friend ReadOnly Property idenperscod1Column As DataColumn
                Get
                    Return Me.columnidenperscod1
                End Get
            End Property
            
            Friend ReadOnly Property persidencod1Column As DataColumn
                Get
                    Return Me.columnpersidencod1
                End Get
            End Property
            
            Friend ReadOnly Property movilColumn As DataColumn
                Get
                    Return Me.columnmovil
                End Get
            End Property
            
            Friend ReadOnly Property fecha_nacimientoColumn As DataColumn
                Get
                    Return Me.columnfecha_nacimiento
                End Get
            End Property
            
            Public Default ReadOnly Property Item(ByVal index As Integer) As persRow
                Get
                    Return CType(Me.Rows(index),persRow)
                End Get
            End Property
            
            Public Event persRowChanged As persRowChangeEventHandler
            
            Public Event persRowChanging As persRowChangeEventHandler
            
            Public Event persRowDeleted As persRowChangeEventHandler
            
            Public Event persRowDeleting As persRowChangeEventHandler
            
            Public Overloads Sub AddpersRow(ByVal row As persRow)
                Me.Rows.Add(row)
            End Sub
            
            Public Overloads Function AddpersRow(ByVal pers_key As Integer, ByVal perssur1 As String, ByVal perssur2 As String, ByVal persname As String, ByVal tsexcode As String, ByVal persfullname As String, ByVal idenperscod1 As String, ByVal persidencod1 As String, ByVal movil As String, ByVal fecha_nacimiento As String) As persRow
                Dim rowpersRow As persRow = CType(Me.NewRow,persRow)
                rowpersRow.ItemArray = New Object() {pers_key, perssur1, perssur2, persname, tsexcode, persfullname, idenperscod1, persidencod1, movil, fecha_nacimiento}
                Me.Rows.Add(rowpersRow)
                Return rowpersRow
            End Function
            
            Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            Public Overrides Function Clone() As DataTable
                Dim cln As persDataTable = CType(MyBase.Clone,persDataTable)
                cln.InitVars
                Return cln
            End Function
            
            Protected Overrides Function CreateInstance() As DataTable
                Return New persDataTable
            End Function
            
            Friend Sub InitVars()
                Me.columnpers_key = Me.Columns("pers_key")
                Me.columnperssur1 = Me.Columns("perssur1")
                Me.columnperssur2 = Me.Columns("perssur2")
                Me.columnpersname = Me.Columns("persname")
                Me.columntsexcode = Me.Columns("tsexcode")
                Me.columnpersfullname = Me.Columns("persfullname")
                Me.columnidenperscod1 = Me.Columns("idenperscod1")
                Me.columnpersidencod1 = Me.Columns("persidencod1")
                Me.columnmovil = Me.Columns("movil")
                Me.columnfecha_nacimiento = Me.Columns("fecha_nacimiento")
            End Sub
            
            Private Sub InitClass()
                Me.columnpers_key = New DataColumn("pers_key", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnpers_key)
                Me.columnperssur1 = New DataColumn("perssur1", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnperssur1)
                Me.columnperssur2 = New DataColumn("perssur2", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnperssur2)
                Me.columnpersname = New DataColumn("persname", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnpersname)
                Me.columntsexcode = New DataColumn("tsexcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columntsexcode)
                Me.columnpersfullname = New DataColumn("persfullname", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnpersfullname)
                Me.columnidenperscod1 = New DataColumn("idenperscod1", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnidenperscod1)
                Me.columnpersidencod1 = New DataColumn("persidencod1", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnpersidencod1)
                Me.columnmovil = New DataColumn("movil", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnmovil)
                Me.columnfecha_nacimiento = New DataColumn("fecha_nacimiento", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnfecha_nacimiento)
                Me.Constraints.Add(New UniqueConstraint("ds_citaKey1", New DataColumn() {Me.columnpers_key}, false))
                Me.columnpers_key.AllowDBNull = false
                Me.columnpers_key.Unique = true
            End Sub
            
            Public Function NewpersRow() As persRow
                Return CType(Me.NewRow,persRow)
            End Function
            
            Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
                Return New persRow(builder)
            End Function
            
            Protected Overrides Function GetRowType() As System.Type
                Return GetType(persRow)
            End Function
            
            Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.persRowChangedEvent) Is Nothing) Then
                    RaiseEvent persRowChanged(Me, New persRowChangeEvent(CType(e.Row,persRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.persRowChangingEvent) Is Nothing) Then
                    RaiseEvent persRowChanging(Me, New persRowChangeEvent(CType(e.Row,persRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.persRowDeletedEvent) Is Nothing) Then
                    RaiseEvent persRowDeleted(Me, New persRowChangeEvent(CType(e.Row,persRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.persRowDeletingEvent) Is Nothing) Then
                    RaiseEvent persRowDeleting(Me, New persRowChangeEvent(CType(e.Row,persRow), e.Action))
                End If
            End Sub
            
            Public Sub RemovepersRow(ByVal row As persRow)
                Me.Rows.Remove(row)
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class persRow
            Inherits DataRow
            
            Private tablepers As persDataTable
            
            Friend Sub New(ByVal rb As DataRowBuilder)
                MyBase.New(rb)
                Me.tablepers = CType(Me.Table,persDataTable)
            End Sub
            
            Public Property pers_key As Integer
                Get
                    Return CType(Me(Me.tablepers.pers_keyColumn),Integer)
                End Get
                Set
                    Me(Me.tablepers.pers_keyColumn) = value
                End Set
            End Property
            
            Public Property perssur1 As String
                Get
                    Try 
                        Return CType(Me(Me.tablepers.perssur1Column),String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablepers.perssur1Column) = value
                End Set
            End Property
            
            Public Property perssur2 As String
                Get
                    Try 
                        Return CType(Me(Me.tablepers.perssur2Column),String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablepers.perssur2Column) = value
                End Set
            End Property
            
            Public Property persname As String
                Get
                    Try 
                        Return CType(Me(Me.tablepers.persnameColumn),String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablepers.persnameColumn) = value
                End Set
            End Property
            
            Public Property tsexcode As String
                Get
                    Try 
                        Return CType(Me(Me.tablepers.tsexcodeColumn),String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablepers.tsexcodeColumn) = value
                End Set
            End Property
            
            Public Property persfullname As String
                Get
                    Try 
                        Return CType(Me(Me.tablepers.persfullnameColumn),String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablepers.persfullnameColumn) = value
                End Set
            End Property
            
            Public Property idenperscod1 As String
                Get
                    Try 
                        Return CType(Me(Me.tablepers.idenperscod1Column),String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablepers.idenperscod1Column) = value
                End Set
            End Property
            
            Public Property persidencod1 As String
                Get
                    Try 
                        Return CType(Me(Me.tablepers.persidencod1Column),String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablepers.persidencod1Column) = value
                End Set
            End Property
            
            Public Property movil As String
                Get
                    Try 
                        Return CType(Me(Me.tablepers.movilColumn),String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablepers.movilColumn) = value
                End Set
            End Property
            
            Public Property fecha_nacimiento As String
                Get
                    Try 
                        Return CType(Me(Me.tablepers.fecha_nacimientoColumn),String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablepers.fecha_nacimientoColumn) = value
                End Set
            End Property
            
            Public Function Isperssur1Null() As Boolean
                Return Me.IsNull(Me.tablepers.perssur1Column)
            End Function
            
            Public Sub Setperssur1Null()
                Me(Me.tablepers.perssur1Column) = System.Convert.DBNull
            End Sub
            
            Public Function Isperssur2Null() As Boolean
                Return Me.IsNull(Me.tablepers.perssur2Column)
            End Function
            
            Public Sub Setperssur2Null()
                Me(Me.tablepers.perssur2Column) = System.Convert.DBNull
            End Sub
            
            Public Function IspersnameNull() As Boolean
                Return Me.IsNull(Me.tablepers.persnameColumn)
            End Function
            
            Public Sub SetpersnameNull()
                Me(Me.tablepers.persnameColumn) = System.Convert.DBNull
            End Sub
            
            Public Function IstsexcodeNull() As Boolean
                Return Me.IsNull(Me.tablepers.tsexcodeColumn)
            End Function
            
            Public Sub SettsexcodeNull()
                Me(Me.tablepers.tsexcodeColumn) = System.Convert.DBNull
            End Sub
            
            Public Function IspersfullnameNull() As Boolean
                Return Me.IsNull(Me.tablepers.persfullnameColumn)
            End Function
            
            Public Sub SetpersfullnameNull()
                Me(Me.tablepers.persfullnameColumn) = System.Convert.DBNull
            End Sub
            
            Public Function Isidenperscod1Null() As Boolean
                Return Me.IsNull(Me.tablepers.idenperscod1Column)
            End Function
            
            Public Sub Setidenperscod1Null()
                Me(Me.tablepers.idenperscod1Column) = System.Convert.DBNull
            End Sub
            
            Public Function Ispersidencod1Null() As Boolean
                Return Me.IsNull(Me.tablepers.persidencod1Column)
            End Function
            
            Public Sub Setpersidencod1Null()
                Me(Me.tablepers.persidencod1Column) = System.Convert.DBNull
            End Sub
            
            Public Function IsmovilNull() As Boolean
                Return Me.IsNull(Me.tablepers.movilColumn)
            End Function
            
            Public Sub SetmovilNull()
                Me(Me.tablepers.movilColumn) = System.Convert.DBNull
            End Sub
            
            Public Function Isfecha_nacimientoNull() As Boolean
                Return Me.IsNull(Me.tablepers.fecha_nacimientoColumn)
            End Function
            
            Public Sub Setfecha_nacimientoNull()
                Me(Me.tablepers.fecha_nacimientoColumn) = System.Convert.DBNull
            End Sub
            
            Public Function GetcitaRows() As citaRow()
                Return CType(Me.GetChildRows(Me.Table.ChildRelations("perscita")),citaRow())
            End Function
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class persRowChangeEvent
            Inherits EventArgs
            
            Private eventRow As persRow
            
            Private eventAction As DataRowAction
            
            Public Sub New(ByVal row As persRow, ByVal action As DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            Public ReadOnly Property Row As persRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            Public ReadOnly Property Action As DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
    
    <Serializable(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Diagnostics.DebuggerStepThrough(),  _
     System.ComponentModel.ToolboxItem(true)>  _
    Public Class ds_baja_cita
        Inherits DataSet
        
        Private tablebaja_cita As baja_citaDataTable
        
        Public Sub New()
            MyBase.New
            Me.InitClass
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
            MyBase.New
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
            If (Not (strSchema) Is Nothing) Then
                Dim ds As DataSet = New DataSet
                ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("baja_cita")) Is Nothing) Then
                    Me.Tables.Add(New baja_citaDataTable(ds.Tables("baja_cita")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.InitClass
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        <System.ComponentModel.Browsable(false),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property baja_cita As baja_citaDataTable
            Get
                Return Me.tablebaja_cita
            End Get
        End Property
        
        Public Overrides Function Clone() As DataSet
            Dim cln As ds_baja_cita = CType(MyBase.Clone,ds_baja_cita)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
            Me.Reset
            Dim ds As DataSet = New DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("baja_cita")) Is Nothing) Then
                Me.Tables.Add(New baja_citaDataTable(ds.Tables("baja_cita")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        End Sub
        
        Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
            Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
            Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
        End Function
        
        Friend Sub InitVars()
            Me.tablebaja_cita = CType(Me.Tables("baja_cita"),baja_citaDataTable)
            If (Not (Me.tablebaja_cita) Is Nothing) Then
                Me.tablebaja_cita.InitVars
            End If
        End Sub
        
        Private Sub InitClass()
            Me.DataSetName = "ds_baja_cita"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/ds_baja_cita.xsd"
            Me.Locale = New System.Globalization.CultureInfo("en-US")
            Me.CaseSensitive = false
            Me.EnforceConstraints = true
            Me.tablebaja_cita = New baja_citaDataTable
            Me.Tables.Add(Me.tablebaja_cita)
        End Sub
        
        Private Function ShouldSerializebaja_cita() As Boolean
            Return false
        End Function
        
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        Public Delegate Sub baja_citaRowChangeEventHandler(ByVal sender As Object, ByVal e As baja_citaRowChangeEvent)
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class baja_citaDataTable
            Inherits DataTable
            Implements System.Collections.IEnumerable
            
            Private columnepis_key_cima As DataColumn
            
            Private columnmotivo As DataColumn
            
            Friend Sub New()
                MyBase.New("baja_cita")
                Me.InitClass
            End Sub
            
            Friend Sub New(ByVal table As DataTable)
                MyBase.New(table.TableName)
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
                Me.DisplayExpression = table.DisplayExpression
            End Sub
            
            <System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            Friend ReadOnly Property epis_key_cimaColumn As DataColumn
                Get
                    Return Me.columnepis_key_cima
                End Get
            End Property
            
            Friend ReadOnly Property motivoColumn As DataColumn
                Get
                    Return Me.columnmotivo
                End Get
            End Property
            
            Public Default ReadOnly Property Item(ByVal index As Integer) As baja_citaRow
                Get
                    Return CType(Me.Rows(index),baja_citaRow)
                End Get
            End Property
            
            Public Event baja_citaRowChanged As baja_citaRowChangeEventHandler
            
            Public Event baja_citaRowChanging As baja_citaRowChangeEventHandler
            
            Public Event baja_citaRowDeleted As baja_citaRowChangeEventHandler
            
            Public Event baja_citaRowDeleting As baja_citaRowChangeEventHandler
            
            Public Overloads Sub Addbaja_citaRow(ByVal row As baja_citaRow)
                Me.Rows.Add(row)
            End Sub
            
            Public Overloads Function Addbaja_citaRow(ByVal epis_key_cima As Integer, ByVal motivo As String) As baja_citaRow
                Dim rowbaja_citaRow As baja_citaRow = CType(Me.NewRow,baja_citaRow)
                rowbaja_citaRow.ItemArray = New Object() {epis_key_cima, motivo}
                Me.Rows.Add(rowbaja_citaRow)
                Return rowbaja_citaRow
            End Function
            
            Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            Public Overrides Function Clone() As DataTable
                Dim cln As baja_citaDataTable = CType(MyBase.Clone,baja_citaDataTable)
                cln.InitVars
                Return cln
            End Function
            
            Protected Overrides Function CreateInstance() As DataTable
                Return New baja_citaDataTable
            End Function
            
            Friend Sub InitVars()
                Me.columnepis_key_cima = Me.Columns("epis_key_cima")
                Me.columnmotivo = Me.Columns("motivo")
            End Sub
            
            Private Sub InitClass()
                Me.columnepis_key_cima = New DataColumn("epis_key_cima", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnepis_key_cima)
                Me.columnmotivo = New DataColumn("motivo", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnmotivo)
            End Sub
            
            Public Function Newbaja_citaRow() As baja_citaRow
                Return CType(Me.NewRow,baja_citaRow)
            End Function
            
            Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
                Return New baja_citaRow(builder)
            End Function
            
            Protected Overrides Function GetRowType() As System.Type
                Return GetType(baja_citaRow)
            End Function
            
            Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.baja_citaRowChangedEvent) Is Nothing) Then
                    RaiseEvent baja_citaRowChanged(Me, New baja_citaRowChangeEvent(CType(e.Row,baja_citaRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.baja_citaRowChangingEvent) Is Nothing) Then
                    RaiseEvent baja_citaRowChanging(Me, New baja_citaRowChangeEvent(CType(e.Row,baja_citaRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.baja_citaRowDeletedEvent) Is Nothing) Then
                    RaiseEvent baja_citaRowDeleted(Me, New baja_citaRowChangeEvent(CType(e.Row,baja_citaRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.baja_citaRowDeletingEvent) Is Nothing) Then
                    RaiseEvent baja_citaRowDeleting(Me, New baja_citaRowChangeEvent(CType(e.Row,baja_citaRow), e.Action))
                End If
            End Sub
            
            Public Sub Removebaja_citaRow(ByVal row As baja_citaRow)
                Me.Rows.Remove(row)
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class baja_citaRow
            Inherits DataRow
            
            Private tablebaja_cita As baja_citaDataTable
            
            Friend Sub New(ByVal rb As DataRowBuilder)
                MyBase.New(rb)
                Me.tablebaja_cita = CType(Me.Table,baja_citaDataTable)
            End Sub
            
            Public Property epis_key_cima As Integer
                Get
                    Try 
                        Return CType(Me(Me.tablebaja_cita.epis_key_cimaColumn),Integer)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablebaja_cita.epis_key_cimaColumn) = value
                End Set
            End Property
            
            Public Property motivo As String
                Get
                    Try 
                        Return CType(Me(Me.tablebaja_cita.motivoColumn),String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablebaja_cita.motivoColumn) = value
                End Set
            End Property
            
            Public Function Isepis_key_cimaNull() As Boolean
                Return Me.IsNull(Me.tablebaja_cita.epis_key_cimaColumn)
            End Function
            
            Public Sub Setepis_key_cimaNull()
                Me(Me.tablebaja_cita.epis_key_cimaColumn) = System.Convert.DBNull
            End Sub
            
            Public Function IsmotivoNull() As Boolean
                Return Me.IsNull(Me.tablebaja_cita.motivoColumn)
            End Function
            
            Public Sub SetmotivoNull()
                Me(Me.tablebaja_cita.motivoColumn) = System.Convert.DBNull
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class baja_citaRowChangeEvent
            Inherits EventArgs
            
            Private eventRow As baja_citaRow
            
            Private eventAction As DataRowAction
            
            Public Sub New(ByVal row As baja_citaRow, ByVal action As DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            Public ReadOnly Property Row As baja_citaRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            Public ReadOnly Property Action As DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
End Namespace
