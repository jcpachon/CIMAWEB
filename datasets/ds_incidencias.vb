'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2443
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ds_incidencias
    Inherits DataSet
    
    Private tableincidencias As incidenciasDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("incidencias")) Is Nothing) Then
                Me.Tables.Add(New incidenciasDataTable(ds.Tables("incidencias")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property incidencias As incidenciasDataTable
        Get
            Return Me.tableincidencias
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ds_incidencias = CType(MyBase.Clone,ds_incidencias)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("incidencias")) Is Nothing) Then
            Me.Tables.Add(New incidenciasDataTable(ds.Tables("incidencias")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableincidencias = CType(Me.Tables("incidencias"),incidenciasDataTable)
        If (Not (Me.tableincidencias) Is Nothing) Then
            Me.tableincidencias.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ds_incidencias"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ds_incidencias.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableincidencias = New incidenciasDataTable
        Me.Tables.Add(Me.tableincidencias)
    End Sub
    
    Private Function ShouldSerializeincidencias() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub incidenciasRowChangeEventHandler(ByVal sender As Object, ByVal e As incidenciasRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class incidenciasDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_incidencia As DataColumn
        
        Private columncodigo_inc As DataColumn
        
        Private columndescripcion_inc As DataColumn
        
        Private columntactcode As DataColumn
        
        Private columnactivo As DataColumn
        
        Friend Sub New()
            MyBase.New("incidencias")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_incidenciaColumn As DataColumn
            Get
                Return Me.columnid_incidencia
            End Get
        End Property
        
        Friend ReadOnly Property codigo_incColumn As DataColumn
            Get
                Return Me.columncodigo_inc
            End Get
        End Property
        
        Friend ReadOnly Property descripcion_incColumn As DataColumn
            Get
                Return Me.columndescripcion_inc
            End Get
        End Property
        
        Friend ReadOnly Property tactcodeColumn As DataColumn
            Get
                Return Me.columntactcode
            End Get
        End Property
        
        Friend ReadOnly Property activoColumn As DataColumn
            Get
                Return Me.columnactivo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As incidenciasRow
            Get
                Return CType(Me.Rows(index),incidenciasRow)
            End Get
        End Property
        
        Public Event incidenciasRowChanged As incidenciasRowChangeEventHandler
        
        Public Event incidenciasRowChanging As incidenciasRowChangeEventHandler
        
        Public Event incidenciasRowDeleted As incidenciasRowChangeEventHandler
        
        Public Event incidenciasRowDeleting As incidenciasRowChangeEventHandler
        
        Public Overloads Sub AddincidenciasRow(ByVal row As incidenciasRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddincidenciasRow(ByVal id_incidencia As Integer, ByVal codigo_inc As String, ByVal descripcion_inc As String, ByVal tactcode As String, ByVal activo As String) As incidenciasRow
            Dim rowincidenciasRow As incidenciasRow = CType(Me.NewRow,incidenciasRow)
            rowincidenciasRow.ItemArray = New Object() {id_incidencia, codigo_inc, descripcion_inc, tactcode, activo}
            Me.Rows.Add(rowincidenciasRow)
            Return rowincidenciasRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As incidenciasDataTable = CType(MyBase.Clone,incidenciasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New incidenciasDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_incidencia = Me.Columns("id_incidencia")
            Me.columncodigo_inc = Me.Columns("codigo_inc")
            Me.columndescripcion_inc = Me.Columns("descripcion_inc")
            Me.columntactcode = Me.Columns("tactcode")
            Me.columnactivo = Me.Columns("activo")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_incidencia = New DataColumn("id_incidencia", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_incidencia)
            Me.columncodigo_inc = New DataColumn("codigo_inc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncodigo_inc)
            Me.columndescripcion_inc = New DataColumn("descripcion_inc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescripcion_inc)
            Me.columntactcode = New DataColumn("tactcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntactcode)
            Me.columnactivo = New DataColumn("activo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnactivo)
            Me.columncodigo_inc.AllowDBNull = false
        End Sub
        
        Public Function NewincidenciasRow() As incidenciasRow
            Return CType(Me.NewRow,incidenciasRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New incidenciasRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(incidenciasRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.incidenciasRowChangedEvent) Is Nothing) Then
                RaiseEvent incidenciasRowChanged(Me, New incidenciasRowChangeEvent(CType(e.Row,incidenciasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.incidenciasRowChangingEvent) Is Nothing) Then
                RaiseEvent incidenciasRowChanging(Me, New incidenciasRowChangeEvent(CType(e.Row,incidenciasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.incidenciasRowDeletedEvent) Is Nothing) Then
                RaiseEvent incidenciasRowDeleted(Me, New incidenciasRowChangeEvent(CType(e.Row,incidenciasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.incidenciasRowDeletingEvent) Is Nothing) Then
                RaiseEvent incidenciasRowDeleting(Me, New incidenciasRowChangeEvent(CType(e.Row,incidenciasRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveincidenciasRow(ByVal row As incidenciasRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class incidenciasRow
        Inherits DataRow
        
        Private tableincidencias As incidenciasDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableincidencias = CType(Me.Table,incidenciasDataTable)
        End Sub
        
        Public Property id_incidencia As Integer
            Get
                Try 
                    Return CType(Me(Me.tableincidencias.id_incidenciaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableincidencias.id_incidenciaColumn) = value
            End Set
        End Property
        
        Public Property codigo_inc As String
            Get
                Return CType(Me(Me.tableincidencias.codigo_incColumn),String)
            End Get
            Set
                Me(Me.tableincidencias.codigo_incColumn) = value
            End Set
        End Property
        
        Public Property descripcion_inc As String
            Get
                Try 
                    Return CType(Me(Me.tableincidencias.descripcion_incColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableincidencias.descripcion_incColumn) = value
            End Set
        End Property
        
        Public Property tactcode As String
            Get
                Try 
                    Return CType(Me(Me.tableincidencias.tactcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableincidencias.tactcodeColumn) = value
            End Set
        End Property
        
        Public Property activo As String
            Get
                Try 
                    Return CType(Me(Me.tableincidencias.activoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableincidencias.activoColumn) = value
            End Set
        End Property
        
        Public Function Isid_incidenciaNull() As Boolean
            Return Me.IsNull(Me.tableincidencias.id_incidenciaColumn)
        End Function
        
        Public Sub Setid_incidenciaNull()
            Me(Me.tableincidencias.id_incidenciaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdescripcion_incNull() As Boolean
            Return Me.IsNull(Me.tableincidencias.descripcion_incColumn)
        End Function
        
        Public Sub Setdescripcion_incNull()
            Me(Me.tableincidencias.descripcion_incColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstactcodeNull() As Boolean
            Return Me.IsNull(Me.tableincidencias.tactcodeColumn)
        End Function
        
        Public Sub SettactcodeNull()
            Me(Me.tableincidencias.tactcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsactivoNull() As Boolean
            Return Me.IsNull(Me.tableincidencias.activoColumn)
        End Function
        
        Public Sub SetactivoNull()
            Me(Me.tableincidencias.activoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class incidenciasRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As incidenciasRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As incidenciasRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As incidenciasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
