'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2463
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ds_plantas
    Inherits DataSet
    
    Private tablespdi As spdiDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("spdi")) Is Nothing) Then
                Me.Tables.Add(New spdiDataTable(ds.Tables("spdi")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property spdi As spdiDataTable
        Get
            Return Me.tablespdi
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ds_plantas = CType(MyBase.Clone,ds_plantas)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("spdi")) Is Nothing) Then
            Me.Tables.Add(New spdiDataTable(ds.Tables("spdi")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablespdi = CType(Me.Tables("spdi"),spdiDataTable)
        If (Not (Me.tablespdi) Is Nothing) Then
            Me.tablespdi.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ds_plantas"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ds_plantas.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablespdi = New spdiDataTable
        Me.Tables.Add(Me.tablespdi)
    End Sub
    
    Private Function ShouldSerializespdi() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub spdiRowChangeEventHandler(ByVal sender As Object, ByVal e As spdiRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class spdiDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnspdi_key As DataColumn
        
        Private columnspdidesclong As DataColumn
        
        Friend Sub New()
            MyBase.New("spdi")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property spdi_keyColumn As DataColumn
            Get
                Return Me.columnspdi_key
            End Get
        End Property
        
        Friend ReadOnly Property spdidesclongColumn As DataColumn
            Get
                Return Me.columnspdidesclong
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As spdiRow
            Get
                Return CType(Me.Rows(index),spdiRow)
            End Get
        End Property
        
        Public Event spdiRowChanged As spdiRowChangeEventHandler
        
        Public Event spdiRowChanging As spdiRowChangeEventHandler
        
        Public Event spdiRowDeleted As spdiRowChangeEventHandler
        
        Public Event spdiRowDeleting As spdiRowChangeEventHandler
        
        Public Overloads Sub AddspdiRow(ByVal row As spdiRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddspdiRow(ByVal spdi_key As Integer, ByVal spdidesclong As String) As spdiRow
            Dim rowspdiRow As spdiRow = CType(Me.NewRow,spdiRow)
            rowspdiRow.ItemArray = New Object() {spdi_key, spdidesclong}
            Me.Rows.Add(rowspdiRow)
            Return rowspdiRow
        End Function
        
        Public Function FindByspdi_key(ByVal spdi_key As Integer) As spdiRow
            Return CType(Me.Rows.Find(New Object() {spdi_key}),spdiRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As spdiDataTable = CType(MyBase.Clone,spdiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New spdiDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnspdi_key = Me.Columns("spdi_key")
            Me.columnspdidesclong = Me.Columns("spdidesclong")
        End Sub
        
        Private Sub InitClass()
            Me.columnspdi_key = New DataColumn("spdi_key", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnspdi_key)
            Me.columnspdidesclong = New DataColumn("spdidesclong", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnspdidesclong)
            Me.Constraints.Add(New UniqueConstraint("ds_plantasKey1", New DataColumn() {Me.columnspdi_key}, true))
            Me.columnspdi_key.AllowDBNull = false
            Me.columnspdi_key.Unique = true
        End Sub
        
        Public Function NewspdiRow() As spdiRow
            Return CType(Me.NewRow,spdiRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New spdiRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(spdiRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.spdiRowChangedEvent) Is Nothing) Then
                RaiseEvent spdiRowChanged(Me, New spdiRowChangeEvent(CType(e.Row,spdiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.spdiRowChangingEvent) Is Nothing) Then
                RaiseEvent spdiRowChanging(Me, New spdiRowChangeEvent(CType(e.Row,spdiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.spdiRowDeletedEvent) Is Nothing) Then
                RaiseEvent spdiRowDeleted(Me, New spdiRowChangeEvent(CType(e.Row,spdiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.spdiRowDeletingEvent) Is Nothing) Then
                RaiseEvent spdiRowDeleting(Me, New spdiRowChangeEvent(CType(e.Row,spdiRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovespdiRow(ByVal row As spdiRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class spdiRow
        Inherits DataRow
        
        Private tablespdi As spdiDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablespdi = CType(Me.Table,spdiDataTable)
        End Sub
        
        Public Property spdi_key As Integer
            Get
                Return CType(Me(Me.tablespdi.spdi_keyColumn),Integer)
            End Get
            Set
                Me(Me.tablespdi.spdi_keyColumn) = value
            End Set
        End Property
        
        Public Property spdidesclong As String
            Get
                Try 
                    Return CType(Me(Me.tablespdi.spdidesclongColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespdi.spdidesclongColumn) = value
            End Set
        End Property
        
        Public Function IsspdidesclongNull() As Boolean
            Return Me.IsNull(Me.tablespdi.spdidesclongColumn)
        End Function
        
        Public Sub SetspdidesclongNull()
            Me(Me.tablespdi.spdidesclongColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class spdiRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As spdiRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As spdiRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As spdiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
