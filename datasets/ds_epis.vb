'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2470
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ds_epis
    Inherits DataSet
    
    Private tableepis As episDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("epis")) Is Nothing) Then
                Me.Tables.Add(New episDataTable(ds.Tables("epis")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property epis As episDataTable
        Get
            Return Me.tableepis
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ds_epis = CType(MyBase.Clone,ds_epis)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("epis")) Is Nothing) Then
            Me.Tables.Add(New episDataTable(ds.Tables("epis")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableepis = CType(Me.Tables("epis"),episDataTable)
        If (Not (Me.tableepis) Is Nothing) Then
            Me.tableepis.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ds_epis"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ds_epis.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableepis = New episDataTable
        Me.Tables.Add(Me.tableepis)
    End Sub
    
    Private Function ShouldSerializeepis() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub episRowChangeEventHandler(ByVal sender As Object, ByVal e As episRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class episDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFecha As DataColumn
        
        Private columnÁrea As DataColumn
        
        Private columnEpisodio As DataColumn
        
        Private columnDoctor As DataColumn
        
        Private columnEstado As DataColumn
        
        Private columnHora As DataColumn
        
        Private columnAgenda As DataColumn
        
        Private columnPrestacion As DataColumn
        
        Friend Sub New()
            MyBase.New("epis")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property ÁreaColumn As DataColumn
            Get
                Return Me.columnÁrea
            End Get
        End Property
        
        Friend ReadOnly Property EpisodioColumn As DataColumn
            Get
                Return Me.columnEpisodio
            End Get
        End Property
        
        Friend ReadOnly Property DoctorColumn As DataColumn
            Get
                Return Me.columnDoctor
            End Get
        End Property
        
        Friend ReadOnly Property EstadoColumn As DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        Friend ReadOnly Property HoraColumn As DataColumn
            Get
                Return Me.columnHora
            End Get
        End Property
        
        Friend ReadOnly Property AgendaColumn As DataColumn
            Get
                Return Me.columnAgenda
            End Get
        End Property
        
        Friend ReadOnly Property PrestacionColumn As DataColumn
            Get
                Return Me.columnPrestacion
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As episRow
            Get
                Return CType(Me.Rows(index),episRow)
            End Get
        End Property
        
        Public Event episRowChanged As episRowChangeEventHandler
        
        Public Event episRowChanging As episRowChangeEventHandler
        
        Public Event episRowDeleted As episRowChangeEventHandler
        
        Public Event episRowDeleting As episRowChangeEventHandler
        
        Public Overloads Sub AddepisRow(ByVal row As episRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddepisRow(ByVal Fecha As String, ByVal Área As String, ByVal Episodio As String, ByVal Doctor As String, ByVal Estado As String, ByVal Hora As String, ByVal Agenda As String, ByVal Prestacion As String) As episRow
            Dim rowepisRow As episRow = CType(Me.NewRow,episRow)
            rowepisRow.ItemArray = New Object() {Fecha, Área, Episodio, Doctor, Estado, Hora, Agenda, Prestacion}
            Me.Rows.Add(rowepisRow)
            Return rowepisRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As episDataTable = CType(MyBase.Clone,episDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New episDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnFecha = Me.Columns("Fecha")
            Me.columnÁrea = Me.Columns("Área")
            Me.columnEpisodio = Me.Columns("Episodio")
            Me.columnDoctor = Me.Columns("Doctor")
            Me.columnEstado = Me.Columns("Estado")
            Me.columnHora = Me.Columns("Hora")
            Me.columnAgenda = Me.Columns("Agenda")
            Me.columnPrestacion = Me.Columns("Prestacion")
        End Sub
        
        Private Sub InitClass()
            Me.columnFecha = New DataColumn("Fecha", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columnÁrea = New DataColumn("Área", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnÁrea)
            Me.columnEpisodio = New DataColumn("Episodio", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEpisodio)
            Me.columnDoctor = New DataColumn("Doctor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDoctor)
            Me.columnEstado = New DataColumn("Estado", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEstado)
            Me.columnHora = New DataColumn("Hora", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHora)
            Me.columnAgenda = New DataColumn("Agenda", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAgenda)
            Me.columnPrestacion = New DataColumn("Prestacion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrestacion)
            Me.columnFecha.AllowDBNull = false
            Me.columnÁrea.AllowDBNull = false
        End Sub
        
        Public Function NewepisRow() As episRow
            Return CType(Me.NewRow,episRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New episRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(episRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.episRowChangedEvent) Is Nothing) Then
                RaiseEvent episRowChanged(Me, New episRowChangeEvent(CType(e.Row,episRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.episRowChangingEvent) Is Nothing) Then
                RaiseEvent episRowChanging(Me, New episRowChangeEvent(CType(e.Row,episRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.episRowDeletedEvent) Is Nothing) Then
                RaiseEvent episRowDeleted(Me, New episRowChangeEvent(CType(e.Row,episRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.episRowDeletingEvent) Is Nothing) Then
                RaiseEvent episRowDeleting(Me, New episRowChangeEvent(CType(e.Row,episRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveepisRow(ByVal row As episRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class episRow
        Inherits DataRow
        
        Private tableepis As episDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableepis = CType(Me.Table,episDataTable)
        End Sub
        
        Public Property Fecha As String
            Get
                Return CType(Me(Me.tableepis.FechaColumn),String)
            End Get
            Set
                Me(Me.tableepis.FechaColumn) = value
            End Set
        End Property
        
        Public Property Área As String
            Get
                Return CType(Me(Me.tableepis.ÁreaColumn),String)
            End Get
            Set
                Me(Me.tableepis.ÁreaColumn) = value
            End Set
        End Property
        
        Public Property Episodio As String
            Get
                Try 
                    Return CType(Me(Me.tableepis.EpisodioColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableepis.EpisodioColumn) = value
            End Set
        End Property
        
        Public Property Doctor As String
            Get
                Try 
                    Return CType(Me(Me.tableepis.DoctorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableepis.DoctorColumn) = value
            End Set
        End Property
        
        Public Property Estado As String
            Get
                Try 
                    Return CType(Me(Me.tableepis.EstadoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableepis.EstadoColumn) = value
            End Set
        End Property
        
        Public Property Hora As String
            Get
                Try 
                    Return CType(Me(Me.tableepis.HoraColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableepis.HoraColumn) = value
            End Set
        End Property
        
        Public Property Agenda As String
            Get
                Try 
                    Return CType(Me(Me.tableepis.AgendaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableepis.AgendaColumn) = value
            End Set
        End Property
        
        Public Property Prestacion As String
            Get
                Try 
                    Return CType(Me(Me.tableepis.PrestacionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableepis.PrestacionColumn) = value
            End Set
        End Property
        
        Public Function IsEpisodioNull() As Boolean
            Return Me.IsNull(Me.tableepis.EpisodioColumn)
        End Function
        
        Public Sub SetEpisodioNull()
            Me(Me.tableepis.EpisodioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDoctorNull() As Boolean
            Return Me.IsNull(Me.tableepis.DoctorColumn)
        End Function
        
        Public Sub SetDoctorNull()
            Me(Me.tableepis.DoctorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEstadoNull() As Boolean
            Return Me.IsNull(Me.tableepis.EstadoColumn)
        End Function
        
        Public Sub SetEstadoNull()
            Me(Me.tableepis.EstadoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHoraNull() As Boolean
            Return Me.IsNull(Me.tableepis.HoraColumn)
        End Function
        
        Public Sub SetHoraNull()
            Me(Me.tableepis.HoraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAgendaNull() As Boolean
            Return Me.IsNull(Me.tableepis.AgendaColumn)
        End Function
        
        Public Sub SetAgendaNull()
            Me(Me.tableepis.AgendaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrestacionNull() As Boolean
            Return Me.IsNull(Me.tableepis.PrestacionColumn)
        End Function
        
        Public Sub SetPrestacionNull()
            Me(Me.tableepis.PrestacionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class episRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As episRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As episRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As episRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
