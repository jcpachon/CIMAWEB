'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2300
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ds_agenproc
    Inherits DataSet
    
    Private tableagenproc As agenprocDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("agenproc")) Is Nothing) Then
                Me.Tables.Add(New agenprocDataTable(ds.Tables("agenproc")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property agenproc As agenprocDataTable
        Get
            Return Me.tableagenproc
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ds_agenproc = CType(MyBase.Clone,ds_agenproc)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("agenproc")) Is Nothing) Then
            Me.Tables.Add(New agenprocDataTable(ds.Tables("agenproc")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableagenproc = CType(Me.Tables("agenproc"),agenprocDataTable)
        If (Not (Me.tableagenproc) Is Nothing) Then
            Me.tableagenproc.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ds_agenproc"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ds_agenproc.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableagenproc = New agenprocDataTable
        Me.Tables.Add(Me.tableagenproc)
    End Sub
    
    Private Function ShouldSerializeagenproc() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub agenprocRowChangeEventHandler(ByVal sender As Object, ByVal e As agenprocRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class agenprocDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnagenproc_key As DataColumn
        
        Private columnagentypecode As DataColumn
        
        Private columnagenproccode As DataColumn
        
        Private columnagenprocdesc As DataColumn
        
        Private columnagenprocdura As DataColumn
        
        Private columnagenprocinte As DataColumn
        
        Private columnagenprocacti As DataColumn
        
        Private columntxts_key As DataColumn
        
        Private columnprod_key As DataColumn
        
        Private columnagenprocweig As DataColumn
        
        Private columnmsrepl_tran_version As DataColumn
        
        Friend Sub New()
            MyBase.New("agenproc")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property agenproc_keyColumn As DataColumn
            Get
                Return Me.columnagenproc_key
            End Get
        End Property
        
        Friend ReadOnly Property agentypecodeColumn As DataColumn
            Get
                Return Me.columnagentypecode
            End Get
        End Property
        
        Friend ReadOnly Property agenproccodeColumn As DataColumn
            Get
                Return Me.columnagenproccode
            End Get
        End Property
        
        Friend ReadOnly Property agenprocdescColumn As DataColumn
            Get
                Return Me.columnagenprocdesc
            End Get
        End Property
        
        Friend ReadOnly Property agenprocduraColumn As DataColumn
            Get
                Return Me.columnagenprocdura
            End Get
        End Property
        
        Friend ReadOnly Property agenprocinteColumn As DataColumn
            Get
                Return Me.columnagenprocinte
            End Get
        End Property
        
        Friend ReadOnly Property agenprocactiColumn As DataColumn
            Get
                Return Me.columnagenprocacti
            End Get
        End Property
        
        Friend ReadOnly Property txts_keyColumn As DataColumn
            Get
                Return Me.columntxts_key
            End Get
        End Property
        
        Friend ReadOnly Property prod_keyColumn As DataColumn
            Get
                Return Me.columnprod_key
            End Get
        End Property
        
        Friend ReadOnly Property agenprocweigColumn As DataColumn
            Get
                Return Me.columnagenprocweig
            End Get
        End Property
        
        Friend ReadOnly Property msrepl_tran_versionColumn As DataColumn
            Get
                Return Me.columnmsrepl_tran_version
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As agenprocRow
            Get
                Return CType(Me.Rows(index),agenprocRow)
            End Get
        End Property
        
        Public Event agenprocRowChanged As agenprocRowChangeEventHandler
        
        Public Event agenprocRowChanging As agenprocRowChangeEventHandler
        
        Public Event agenprocRowDeleted As agenprocRowChangeEventHandler
        
        Public Event agenprocRowDeleting As agenprocRowChangeEventHandler
        
        Public Overloads Sub AddagenprocRow(ByVal row As agenprocRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddagenprocRow(ByVal agenproc_key As Integer, ByVal agentypecode As String, ByVal agenproccode As String, ByVal agenprocdesc As String, ByVal agenprocdura As Short, ByVal agenprocinte As Short, ByVal agenprocacti As String, ByVal txts_key As Integer, ByVal prod_key As Integer, ByVal agenprocweig As Integer, ByVal msrepl_tran_version As System.Guid) As agenprocRow
            Dim rowagenprocRow As agenprocRow = CType(Me.NewRow,agenprocRow)
            rowagenprocRow.ItemArray = New Object() {agenproc_key, agentypecode, agenproccode, agenprocdesc, agenprocdura, agenprocinte, agenprocacti, txts_key, prod_key, agenprocweig, msrepl_tran_version}
            Me.Rows.Add(rowagenprocRow)
            Return rowagenprocRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As agenprocDataTable = CType(MyBase.Clone,agenprocDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New agenprocDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnagenproc_key = Me.Columns("agenproc_key")
            Me.columnagentypecode = Me.Columns("agentypecode")
            Me.columnagenproccode = Me.Columns("agenproccode")
            Me.columnagenprocdesc = Me.Columns("agenprocdesc")
            Me.columnagenprocdura = Me.Columns("agenprocdura")
            Me.columnagenprocinte = Me.Columns("agenprocinte")
            Me.columnagenprocacti = Me.Columns("agenprocacti")
            Me.columntxts_key = Me.Columns("txts_key")
            Me.columnprod_key = Me.Columns("prod_key")
            Me.columnagenprocweig = Me.Columns("agenprocweig")
            Me.columnmsrepl_tran_version = Me.Columns("msrepl_tran_version")
        End Sub
        
        Private Sub InitClass()
            Me.columnagenproc_key = New DataColumn("agenproc_key", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnagenproc_key)
            Me.columnagentypecode = New DataColumn("agentypecode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnagentypecode)
            Me.columnagenproccode = New DataColumn("agenproccode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnagenproccode)
            Me.columnagenprocdesc = New DataColumn("agenprocdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnagenprocdesc)
            Me.columnagenprocdura = New DataColumn("agenprocdura", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnagenprocdura)
            Me.columnagenprocinte = New DataColumn("agenprocinte", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnagenprocinte)
            Me.columnagenprocacti = New DataColumn("agenprocacti", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnagenprocacti)
            Me.columntxts_key = New DataColumn("txts_key", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntxts_key)
            Me.columnprod_key = New DataColumn("prod_key", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprod_key)
            Me.columnagenprocweig = New DataColumn("agenprocweig", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnagenprocweig)
            Me.columnmsrepl_tran_version = New DataColumn("msrepl_tran_version", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmsrepl_tran_version)
            Me.columnagenproc_key.AllowDBNull = false
            Me.columnagentypecode.AllowDBNull = false
            Me.columnagenproccode.AllowDBNull = false
            Me.columnagenprocdesc.AllowDBNull = false
            Me.columnagenprocacti.AllowDBNull = false
            Me.columnmsrepl_tran_version.AllowDBNull = false
        End Sub
        
        Public Function NewagenprocRow() As agenprocRow
            Return CType(Me.NewRow,agenprocRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New agenprocRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(agenprocRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.agenprocRowChangedEvent) Is Nothing) Then
                RaiseEvent agenprocRowChanged(Me, New agenprocRowChangeEvent(CType(e.Row,agenprocRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.agenprocRowChangingEvent) Is Nothing) Then
                RaiseEvent agenprocRowChanging(Me, New agenprocRowChangeEvent(CType(e.Row,agenprocRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.agenprocRowDeletedEvent) Is Nothing) Then
                RaiseEvent agenprocRowDeleted(Me, New agenprocRowChangeEvent(CType(e.Row,agenprocRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.agenprocRowDeletingEvent) Is Nothing) Then
                RaiseEvent agenprocRowDeleting(Me, New agenprocRowChangeEvent(CType(e.Row,agenprocRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveagenprocRow(ByVal row As agenprocRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class agenprocRow
        Inherits DataRow
        
        Private tableagenproc As agenprocDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableagenproc = CType(Me.Table,agenprocDataTable)
        End Sub
        
        Public Property agenproc_key As Integer
            Get
                Return CType(Me(Me.tableagenproc.agenproc_keyColumn),Integer)
            End Get
            Set
                Me(Me.tableagenproc.agenproc_keyColumn) = value
            End Set
        End Property
        
        Public Property agentypecode As String
            Get
                Return CType(Me(Me.tableagenproc.agentypecodeColumn),String)
            End Get
            Set
                Me(Me.tableagenproc.agentypecodeColumn) = value
            End Set
        End Property
        
        Public Property agenproccode As String
            Get
                Return CType(Me(Me.tableagenproc.agenproccodeColumn),String)
            End Get
            Set
                Me(Me.tableagenproc.agenproccodeColumn) = value
            End Set
        End Property
        
        Public Property agenprocdesc As String
            Get
                Return CType(Me(Me.tableagenproc.agenprocdescColumn),String)
            End Get
            Set
                Me(Me.tableagenproc.agenprocdescColumn) = value
            End Set
        End Property
        
        Public Property agenprocdura As Short
            Get
                Try 
                    Return CType(Me(Me.tableagenproc.agenprocduraColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableagenproc.agenprocduraColumn) = value
            End Set
        End Property
        
        Public Property agenprocinte As Short
            Get
                Try 
                    Return CType(Me(Me.tableagenproc.agenprocinteColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableagenproc.agenprocinteColumn) = value
            End Set
        End Property
        
        Public Property agenprocacti As String
            Get
                Return CType(Me(Me.tableagenproc.agenprocactiColumn),String)
            End Get
            Set
                Me(Me.tableagenproc.agenprocactiColumn) = value
            End Set
        End Property
        
        Public Property txts_key As Integer
            Get
                Try 
                    Return CType(Me(Me.tableagenproc.txts_keyColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableagenproc.txts_keyColumn) = value
            End Set
        End Property
        
        Public Property prod_key As Integer
            Get
                Try 
                    Return CType(Me(Me.tableagenproc.prod_keyColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableagenproc.prod_keyColumn) = value
            End Set
        End Property
        
        Public Property agenprocweig As Integer
            Get
                Try 
                    Return CType(Me(Me.tableagenproc.agenprocweigColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableagenproc.agenprocweigColumn) = value
            End Set
        End Property
        
        Public Property msrepl_tran_version As System.Guid
            Get
                Return CType(Me(Me.tableagenproc.msrepl_tran_versionColumn),System.Guid)
            End Get
            Set
                Me(Me.tableagenproc.msrepl_tran_versionColumn) = value
            End Set
        End Property
        
        Public Function IsagenprocduraNull() As Boolean
            Return Me.IsNull(Me.tableagenproc.agenprocduraColumn)
        End Function
        
        Public Sub SetagenprocduraNull()
            Me(Me.tableagenproc.agenprocduraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsagenprocinteNull() As Boolean
            Return Me.IsNull(Me.tableagenproc.agenprocinteColumn)
        End Function
        
        Public Sub SetagenprocinteNull()
            Me(Me.tableagenproc.agenprocinteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istxts_keyNull() As Boolean
            Return Me.IsNull(Me.tableagenproc.txts_keyColumn)
        End Function
        
        Public Sub Settxts_keyNull()
            Me(Me.tableagenproc.txts_keyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprod_keyNull() As Boolean
            Return Me.IsNull(Me.tableagenproc.prod_keyColumn)
        End Function
        
        Public Sub Setprod_keyNull()
            Me(Me.tableagenproc.prod_keyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsagenprocweigNull() As Boolean
            Return Me.IsNull(Me.tableagenproc.agenprocweigColumn)
        End Function
        
        Public Sub SetagenprocweigNull()
            Me(Me.tableagenproc.agenprocweigColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class agenprocRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As agenprocRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As agenprocRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As agenprocRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
