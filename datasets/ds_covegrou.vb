'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2300
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ds_covegrou
    Inherits DataSet
    
    Private tablecovegrou As covegrouDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("covegrou")) Is Nothing) Then
                Me.Tables.Add(New covegrouDataTable(ds.Tables("covegrou")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property covegrou As covegrouDataTable
        Get
            Return Me.tablecovegrou
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ds_covegrou = CType(MyBase.Clone,ds_covegrou)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("covegrou")) Is Nothing) Then
            Me.Tables.Add(New covegrouDataTable(ds.Tables("covegrou")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablecovegrou = CType(Me.Tables("covegrou"),covegrouDataTable)
        If (Not (Me.tablecovegrou) Is Nothing) Then
            Me.tablecovegrou.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ds_covegrou"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ds_covegrou.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablecovegrou = New covegrouDataTable
        Me.Tables.Add(Me.tablecovegrou)
    End Sub
    
    Private Function ShouldSerializecovegrou() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub covegrouRowChangeEventHandler(ByVal sender As Object, ByVal e As covegrouRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class covegrouDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncovegrou_key As DataColumn
        
        Private columncovegroucode As DataColumn
        
        Private columnbuni_key As DataColumn
        
        Private columntpolcode As DataColumn
        
        Private columncovegroudescshor As DataColumn
        
        Private columncovegroudesclong As DataColumn
        
        Private columncovegrouacti As DataColumn
        
        Private columncovegrouflagagre As DataColumn
        
        Private columncovegroutimedisc As DataColumn
        
        Private columncovegroucodepres As DataColumn
        
        Private columnaddrcode As DataColumn
        
        Private columncovegrouvalo As DataColumn
        
        Private columncovegroupriv As DataColumn
        
        Private columncovegrouemepinpa As DataColumn
        
        Private columncovegrouteam As DataColumn
        
        Private columncovegroutypeinvs As DataColumn
        
        Private columncovegrounumbrepo As DataColumn
        
        Private columncovegrouvaloinvs As DataColumn
        
        Friend Sub New()
            MyBase.New("covegrou")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property covegrou_keyColumn As DataColumn
            Get
                Return Me.columncovegrou_key
            End Get
        End Property
        
        Friend ReadOnly Property covegroucodeColumn As DataColumn
            Get
                Return Me.columncovegroucode
            End Get
        End Property
        
        Friend ReadOnly Property buni_keyColumn As DataColumn
            Get
                Return Me.columnbuni_key
            End Get
        End Property
        
        Friend ReadOnly Property tpolcodeColumn As DataColumn
            Get
                Return Me.columntpolcode
            End Get
        End Property
        
        Friend ReadOnly Property covegroudescshorColumn As DataColumn
            Get
                Return Me.columncovegroudescshor
            End Get
        End Property
        
        Friend ReadOnly Property covegroudesclongColumn As DataColumn
            Get
                Return Me.columncovegroudesclong
            End Get
        End Property
        
        Friend ReadOnly Property covegrouactiColumn As DataColumn
            Get
                Return Me.columncovegrouacti
            End Get
        End Property
        
        Friend ReadOnly Property covegrouflagagreColumn As DataColumn
            Get
                Return Me.columncovegrouflagagre
            End Get
        End Property
        
        Friend ReadOnly Property covegroutimediscColumn As DataColumn
            Get
                Return Me.columncovegroutimedisc
            End Get
        End Property
        
        Friend ReadOnly Property covegroucodepresColumn As DataColumn
            Get
                Return Me.columncovegroucodepres
            End Get
        End Property
        
        Friend ReadOnly Property addrcodeColumn As DataColumn
            Get
                Return Me.columnaddrcode
            End Get
        End Property
        
        Friend ReadOnly Property covegrouvaloColumn As DataColumn
            Get
                Return Me.columncovegrouvalo
            End Get
        End Property
        
        Friend ReadOnly Property covegrouprivColumn As DataColumn
            Get
                Return Me.columncovegroupriv
            End Get
        End Property
        
        Friend ReadOnly Property covegrouemepinpaColumn As DataColumn
            Get
                Return Me.columncovegrouemepinpa
            End Get
        End Property
        
        Friend ReadOnly Property covegrouteamColumn As DataColumn
            Get
                Return Me.columncovegrouteam
            End Get
        End Property
        
        Friend ReadOnly Property covegroutypeinvsColumn As DataColumn
            Get
                Return Me.columncovegroutypeinvs
            End Get
        End Property
        
        Friend ReadOnly Property covegrounumbrepoColumn As DataColumn
            Get
                Return Me.columncovegrounumbrepo
            End Get
        End Property
        
        Friend ReadOnly Property covegrouvaloinvsColumn As DataColumn
            Get
                Return Me.columncovegrouvaloinvs
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As covegrouRow
            Get
                Return CType(Me.Rows(index),covegrouRow)
            End Get
        End Property
        
        Public Event covegrouRowChanged As covegrouRowChangeEventHandler
        
        Public Event covegrouRowChanging As covegrouRowChangeEventHandler
        
        Public Event covegrouRowDeleted As covegrouRowChangeEventHandler
        
        Public Event covegrouRowDeleting As covegrouRowChangeEventHandler
        
        Public Overloads Sub AddcovegrouRow(ByVal row As covegrouRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddcovegrouRow( _
                    ByVal covegrou_key As Integer,  _
                    ByVal covegroucode As String,  _
                    ByVal buni_key As Integer,  _
                    ByVal tpolcode As String,  _
                    ByVal covegroudescshor As String,  _
                    ByVal covegroudesclong As String,  _
                    ByVal covegrouacti As String,  _
                    ByVal covegrouflagagre As String,  _
                    ByVal covegroutimedisc As Integer,  _
                    ByVal covegroucodepres As String,  _
                    ByVal addrcode As Integer,  _
                    ByVal covegrouvalo As String,  _
                    ByVal covegroupriv As String,  _
                    ByVal covegrouemepinpa As String,  _
                    ByVal covegrouteam As String,  _
                    ByVal covegroutypeinvs As String,  _
                    ByVal covegrounumbrepo As Integer,  _
                    ByVal covegrouvaloinvs As String) As covegrouRow
            Dim rowcovegrouRow As covegrouRow = CType(Me.NewRow,covegrouRow)
            rowcovegrouRow.ItemArray = New Object() {covegrou_key, covegroucode, buni_key, tpolcode, covegroudescshor, covegroudesclong, covegrouacti, covegrouflagagre, covegroutimedisc, covegroucodepres, addrcode, covegrouvalo, covegroupriv, covegrouemepinpa, covegrouteam, covegroutypeinvs, covegrounumbrepo, covegrouvaloinvs}
            Me.Rows.Add(rowcovegrouRow)
            Return rowcovegrouRow
        End Function
        
        Public Function FindBycovegrou_key(ByVal covegrou_key As Integer) As covegrouRow
            Return CType(Me.Rows.Find(New Object() {covegrou_key}),covegrouRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As covegrouDataTable = CType(MyBase.Clone,covegrouDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New covegrouDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncovegrou_key = Me.Columns("covegrou_key")
            Me.columncovegroucode = Me.Columns("covegroucode")
            Me.columnbuni_key = Me.Columns("buni_key")
            Me.columntpolcode = Me.Columns("tpolcode")
            Me.columncovegroudescshor = Me.Columns("covegroudescshor")
            Me.columncovegroudesclong = Me.Columns("covegroudesclong")
            Me.columncovegrouacti = Me.Columns("covegrouacti")
            Me.columncovegrouflagagre = Me.Columns("covegrouflagagre")
            Me.columncovegroutimedisc = Me.Columns("covegroutimedisc")
            Me.columncovegroucodepres = Me.Columns("covegroucodepres")
            Me.columnaddrcode = Me.Columns("addrcode")
            Me.columncovegrouvalo = Me.Columns("covegrouvalo")
            Me.columncovegroupriv = Me.Columns("covegroupriv")
            Me.columncovegrouemepinpa = Me.Columns("covegrouemepinpa")
            Me.columncovegrouteam = Me.Columns("covegrouteam")
            Me.columncovegroutypeinvs = Me.Columns("covegroutypeinvs")
            Me.columncovegrounumbrepo = Me.Columns("covegrounumbrepo")
            Me.columncovegrouvaloinvs = Me.Columns("covegrouvaloinvs")
        End Sub
        
        Private Sub InitClass()
            Me.columncovegrou_key = New DataColumn("covegrou_key", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncovegrou_key)
            Me.columncovegroucode = New DataColumn("covegroucode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncovegroucode)
            Me.columnbuni_key = New DataColumn("buni_key", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbuni_key)
            Me.columntpolcode = New DataColumn("tpolcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntpolcode)
            Me.columncovegroudescshor = New DataColumn("covegroudescshor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncovegroudescshor)
            Me.columncovegroudesclong = New DataColumn("covegroudesclong", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncovegroudesclong)
            Me.columncovegrouacti = New DataColumn("covegrouacti", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncovegrouacti)
            Me.columncovegrouflagagre = New DataColumn("covegrouflagagre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncovegrouflagagre)
            Me.columncovegroutimedisc = New DataColumn("covegroutimedisc", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncovegroutimedisc)
            Me.columncovegroucodepres = New DataColumn("covegroucodepres", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncovegroucodepres)
            Me.columnaddrcode = New DataColumn("addrcode", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddrcode)
            Me.columncovegrouvalo = New DataColumn("covegrouvalo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncovegrouvalo)
            Me.columncovegroupriv = New DataColumn("covegroupriv", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncovegroupriv)
            Me.columncovegrouemepinpa = New DataColumn("covegrouemepinpa", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncovegrouemepinpa)
            Me.columncovegrouteam = New DataColumn("covegrouteam", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncovegrouteam)
            Me.columncovegroutypeinvs = New DataColumn("covegroutypeinvs", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncovegroutypeinvs)
            Me.columncovegrounumbrepo = New DataColumn("covegrounumbrepo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncovegrounumbrepo)
            Me.columncovegrouvaloinvs = New DataColumn("covegrouvaloinvs", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncovegrouvaloinvs)
            Me.Constraints.Add(New UniqueConstraint("ds_covegrouKey1", New DataColumn() {Me.columncovegrou_key}, true))
            Me.columncovegrou_key.AllowDBNull = false
            Me.columncovegrou_key.Unique = true
            Me.columncovegroucode.AllowDBNull = false
            Me.columnbuni_key.AllowDBNull = false
            Me.columncovegroudescshor.AllowDBNull = false
            Me.columncovegrouacti.AllowDBNull = false
            Me.columncovegrouflagagre.AllowDBNull = false
            Me.columncovegrouemepinpa.AllowDBNull = false
            Me.columncovegrouteam.AllowDBNull = false
            Me.columncovegrouvaloinvs.AllowDBNull = false
        End Sub
        
        Public Function NewcovegrouRow() As covegrouRow
            Return CType(Me.NewRow,covegrouRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New covegrouRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(covegrouRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.covegrouRowChangedEvent) Is Nothing) Then
                RaiseEvent covegrouRowChanged(Me, New covegrouRowChangeEvent(CType(e.Row,covegrouRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.covegrouRowChangingEvent) Is Nothing) Then
                RaiseEvent covegrouRowChanging(Me, New covegrouRowChangeEvent(CType(e.Row,covegrouRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.covegrouRowDeletedEvent) Is Nothing) Then
                RaiseEvent covegrouRowDeleted(Me, New covegrouRowChangeEvent(CType(e.Row,covegrouRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.covegrouRowDeletingEvent) Is Nothing) Then
                RaiseEvent covegrouRowDeleting(Me, New covegrouRowChangeEvent(CType(e.Row,covegrouRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovecovegrouRow(ByVal row As covegrouRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class covegrouRow
        Inherits DataRow
        
        Private tablecovegrou As covegrouDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecovegrou = CType(Me.Table,covegrouDataTable)
        End Sub
        
        Public Property covegrou_key As Integer
            Get
                Return CType(Me(Me.tablecovegrou.covegrou_keyColumn),Integer)
            End Get
            Set
                Me(Me.tablecovegrou.covegrou_keyColumn) = value
            End Set
        End Property
        
        Public Property covegroucode As String
            Get
                Return CType(Me(Me.tablecovegrou.covegroucodeColumn),String)
            End Get
            Set
                Me(Me.tablecovegrou.covegroucodeColumn) = value
            End Set
        End Property
        
        Public Property buni_key As Integer
            Get
                Return CType(Me(Me.tablecovegrou.buni_keyColumn),Integer)
            End Get
            Set
                Me(Me.tablecovegrou.buni_keyColumn) = value
            End Set
        End Property
        
        Public Property tpolcode As String
            Get
                Try 
                    Return CType(Me(Me.tablecovegrou.tpolcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecovegrou.tpolcodeColumn) = value
            End Set
        End Property
        
        Public Property covegroudescshor As String
            Get
                Return CType(Me(Me.tablecovegrou.covegroudescshorColumn),String)
            End Get
            Set
                Me(Me.tablecovegrou.covegroudescshorColumn) = value
            End Set
        End Property
        
        Public Property covegroudesclong As String
            Get
                Try 
                    Return CType(Me(Me.tablecovegrou.covegroudesclongColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecovegrou.covegroudesclongColumn) = value
            End Set
        End Property
        
        Public Property covegrouacti As String
            Get
                Return CType(Me(Me.tablecovegrou.covegrouactiColumn),String)
            End Get
            Set
                Me(Me.tablecovegrou.covegrouactiColumn) = value
            End Set
        End Property
        
        Public Property covegrouflagagre As String
            Get
                Return CType(Me(Me.tablecovegrou.covegrouflagagreColumn),String)
            End Get
            Set
                Me(Me.tablecovegrou.covegrouflagagreColumn) = value
            End Set
        End Property
        
        Public Property covegroutimedisc As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecovegrou.covegroutimediscColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecovegrou.covegroutimediscColumn) = value
            End Set
        End Property
        
        Public Property covegroucodepres As String
            Get
                Try 
                    Return CType(Me(Me.tablecovegrou.covegroucodepresColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecovegrou.covegroucodepresColumn) = value
            End Set
        End Property
        
        Public Property addrcode As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecovegrou.addrcodeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecovegrou.addrcodeColumn) = value
            End Set
        End Property
        
        Public Property covegrouvalo As String
            Get
                Try 
                    Return CType(Me(Me.tablecovegrou.covegrouvaloColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecovegrou.covegrouvaloColumn) = value
            End Set
        End Property
        
        Public Property covegroupriv As String
            Get
                Try 
                    Return CType(Me(Me.tablecovegrou.covegrouprivColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecovegrou.covegrouprivColumn) = value
            End Set
        End Property
        
        Public Property covegrouemepinpa As String
            Get
                Return CType(Me(Me.tablecovegrou.covegrouemepinpaColumn),String)
            End Get
            Set
                Me(Me.tablecovegrou.covegrouemepinpaColumn) = value
            End Set
        End Property
        
        Public Property covegrouteam As String
            Get
                Return CType(Me(Me.tablecovegrou.covegrouteamColumn),String)
            End Get
            Set
                Me(Me.tablecovegrou.covegrouteamColumn) = value
            End Set
        End Property
        
        Public Property covegroutypeinvs As String
            Get
                Try 
                    Return CType(Me(Me.tablecovegrou.covegroutypeinvsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecovegrou.covegroutypeinvsColumn) = value
            End Set
        End Property
        
        Public Property covegrounumbrepo As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecovegrou.covegrounumbrepoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecovegrou.covegrounumbrepoColumn) = value
            End Set
        End Property
        
        Public Property covegrouvaloinvs As String
            Get
                Return CType(Me(Me.tablecovegrou.covegrouvaloinvsColumn),String)
            End Get
            Set
                Me(Me.tablecovegrou.covegrouvaloinvsColumn) = value
            End Set
        End Property
        
        Public Function IstpolcodeNull() As Boolean
            Return Me.IsNull(Me.tablecovegrou.tpolcodeColumn)
        End Function
        
        Public Sub SettpolcodeNull()
            Me(Me.tablecovegrou.tpolcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscovegroudesclongNull() As Boolean
            Return Me.IsNull(Me.tablecovegrou.covegroudesclongColumn)
        End Function
        
        Public Sub SetcovegroudesclongNull()
            Me(Me.tablecovegrou.covegroudesclongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscovegroutimediscNull() As Boolean
            Return Me.IsNull(Me.tablecovegrou.covegroutimediscColumn)
        End Function
        
        Public Sub SetcovegroutimediscNull()
            Me(Me.tablecovegrou.covegroutimediscColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscovegroucodepresNull() As Boolean
            Return Me.IsNull(Me.tablecovegrou.covegroucodepresColumn)
        End Function
        
        Public Sub SetcovegroucodepresNull()
            Me(Me.tablecovegrou.covegroucodepresColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaddrcodeNull() As Boolean
            Return Me.IsNull(Me.tablecovegrou.addrcodeColumn)
        End Function
        
        Public Sub SetaddrcodeNull()
            Me(Me.tablecovegrou.addrcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscovegrouvaloNull() As Boolean
            Return Me.IsNull(Me.tablecovegrou.covegrouvaloColumn)
        End Function
        
        Public Sub SetcovegrouvaloNull()
            Me(Me.tablecovegrou.covegrouvaloColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscovegrouprivNull() As Boolean
            Return Me.IsNull(Me.tablecovegrou.covegrouprivColumn)
        End Function
        
        Public Sub SetcovegrouprivNull()
            Me(Me.tablecovegrou.covegrouprivColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscovegroutypeinvsNull() As Boolean
            Return Me.IsNull(Me.tablecovegrou.covegroutypeinvsColumn)
        End Function
        
        Public Sub SetcovegroutypeinvsNull()
            Me(Me.tablecovegrou.covegroutypeinvsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscovegrounumbrepoNull() As Boolean
            Return Me.IsNull(Me.tablecovegrou.covegrounumbrepoColumn)
        End Function
        
        Public Sub SetcovegrounumbrepoNull()
            Me(Me.tablecovegrou.covegrounumbrepoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class covegrouRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As covegrouRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As covegrouRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As covegrouRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
