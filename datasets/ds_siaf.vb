'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ds_siaf
    Inherits DataSet
    
    Private tablesiaf As siafDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("siaf")) Is Nothing) Then
                Me.Tables.Add(New siafDataTable(ds.Tables("siaf")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property siaf As siafDataTable
        Get
            Return Me.tablesiaf
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ds_siaf = CType(MyBase.Clone,ds_siaf)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("siaf")) Is Nothing) Then
            Me.Tables.Add(New siafDataTable(ds.Tables("siaf")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablesiaf = CType(Me.Tables("siaf"),siafDataTable)
        If (Not (Me.tablesiaf) Is Nothing) Then
            Me.tablesiaf.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ds_siaf"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ds_siaf.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablesiaf = New siafDataTable
        Me.Tables.Add(Me.tablesiaf)
    End Sub
    
    Private Function ShouldSerializesiaf() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub siafRowChangeEventHandler(ByVal sender As Object, ByVal e As siafRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class siafDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnsiafcode As DataColumn
        
        Private columnsiafdesc As DataColumn
        
        Private columnsiafacti As DataColumn
        
        Private columnsiafupda As DataColumn
        
        Friend Sub New()
            MyBase.New("siaf")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property siafcodeColumn As DataColumn
            Get
                Return Me.columnsiafcode
            End Get
        End Property
        
        Friend ReadOnly Property siafdescColumn As DataColumn
            Get
                Return Me.columnsiafdesc
            End Get
        End Property
        
        Friend ReadOnly Property siafactiColumn As DataColumn
            Get
                Return Me.columnsiafacti
            End Get
        End Property
        
        Friend ReadOnly Property siafupdaColumn As DataColumn
            Get
                Return Me.columnsiafupda
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As siafRow
            Get
                Return CType(Me.Rows(index),siafRow)
            End Get
        End Property
        
        Public Event siafRowChanged As siafRowChangeEventHandler
        
        Public Event siafRowChanging As siafRowChangeEventHandler
        
        Public Event siafRowDeleted As siafRowChangeEventHandler
        
        Public Event siafRowDeleting As siafRowChangeEventHandler
        
        Public Overloads Sub AddsiafRow(ByVal row As siafRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddsiafRow(ByVal siafcode As String, ByVal siafdesc As String, ByVal siafacti As String, ByVal siafupda As String) As siafRow
            Dim rowsiafRow As siafRow = CType(Me.NewRow,siafRow)
            rowsiafRow.ItemArray = New Object() {siafcode, siafdesc, siafacti, siafupda}
            Me.Rows.Add(rowsiafRow)
            Return rowsiafRow
        End Function
        
        Public Function FindBysiafcode(ByVal siafcode As String) As siafRow
            Return CType(Me.Rows.Find(New Object() {siafcode}),siafRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As siafDataTable = CType(MyBase.Clone,siafDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New siafDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnsiafcode = Me.Columns("siafcode")
            Me.columnsiafdesc = Me.Columns("siafdesc")
            Me.columnsiafacti = Me.Columns("siafacti")
            Me.columnsiafupda = Me.Columns("siafupda")
        End Sub
        
        Private Sub InitClass()
            Me.columnsiafcode = New DataColumn("siafcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsiafcode)
            Me.columnsiafdesc = New DataColumn("siafdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsiafdesc)
            Me.columnsiafacti = New DataColumn("siafacti", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsiafacti)
            Me.columnsiafupda = New DataColumn("siafupda", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsiafupda)
            Me.Constraints.Add(New UniqueConstraint("ds_siafKey1", New DataColumn() {Me.columnsiafcode}, true))
            Me.columnsiafcode.AllowDBNull = false
            Me.columnsiafcode.Unique = true
            Me.columnsiafdesc.AllowDBNull = false
            Me.columnsiafacti.AllowDBNull = false
            Me.columnsiafupda.AllowDBNull = false
        End Sub
        
        Public Function NewsiafRow() As siafRow
            Return CType(Me.NewRow,siafRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New siafRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(siafRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.siafRowChangedEvent) Is Nothing) Then
                RaiseEvent siafRowChanged(Me, New siafRowChangeEvent(CType(e.Row,siafRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.siafRowChangingEvent) Is Nothing) Then
                RaiseEvent siafRowChanging(Me, New siafRowChangeEvent(CType(e.Row,siafRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.siafRowDeletedEvent) Is Nothing) Then
                RaiseEvent siafRowDeleted(Me, New siafRowChangeEvent(CType(e.Row,siafRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.siafRowDeletingEvent) Is Nothing) Then
                RaiseEvent siafRowDeleting(Me, New siafRowChangeEvent(CType(e.Row,siafRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovesiafRow(ByVal row As siafRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class siafRow
        Inherits DataRow
        
        Private tablesiaf As siafDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablesiaf = CType(Me.Table,siafDataTable)
        End Sub
        
        Public Property siafcode As String
            Get
                Return CType(Me(Me.tablesiaf.siafcodeColumn),String)
            End Get
            Set
                Me(Me.tablesiaf.siafcodeColumn) = value
            End Set
        End Property
        
        Public Property siafdesc As String
            Get
                Return CType(Me(Me.tablesiaf.siafdescColumn),String)
            End Get
            Set
                Me(Me.tablesiaf.siafdescColumn) = value
            End Set
        End Property
        
        Public Property siafacti As String
            Get
                Return CType(Me(Me.tablesiaf.siafactiColumn),String)
            End Get
            Set
                Me(Me.tablesiaf.siafactiColumn) = value
            End Set
        End Property
        
        Public Property siafupda As String
            Get
                Return CType(Me(Me.tablesiaf.siafupdaColumn),String)
            End Get
            Set
                Me(Me.tablesiaf.siafupdaColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class siafRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As siafRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As siafRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As siafRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
