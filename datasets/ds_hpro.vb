'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2407
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ds_hpro
    Inherits DataSet
    
    Private tablehpro As hproDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("hpro")) Is Nothing) Then
                Me.Tables.Add(New hproDataTable(ds.Tables("hpro")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property hpro As hproDataTable
        Get
            Return Me.tablehpro
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ds_hpro = CType(MyBase.Clone,ds_hpro)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("hpro")) Is Nothing) Then
            Me.Tables.Add(New hproDataTable(ds.Tables("hpro")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablehpro = CType(Me.Tables("hpro"),hproDataTable)
        If (Not (Me.tablehpro) Is Nothing) Then
            Me.tablehpro.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ds_hpro"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ds_hpro.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablehpro = New hproDataTable
        Me.Tables.Add(Me.tablehpro)
    End Sub
    
    Private Function ShouldSerializehpro() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub hproRowChangeEventHandler(ByVal sender As Object, ByVal e As hproRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class hproDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnhpro_key As DataColumn
        
        Private columnhpro_keyfath As DataColumn
        
        Private columnhprocode As DataColumn
        
        Private columnhprodescshor As DataColumn
        
        Private columnhprodesclong As DataColumn
        
        Private columnhprodura As DataColumn
        
        Private columnhproleve As DataColumn
        
        Private columnhproacti As DataColumn
        
        Private columnhproupda As DataColumn
        
        Private columnplancode As DataColumn
        
        Private columntxts_key As DataColumn
        
        Private columnhproorde As DataColumn
        
        Private columnhpro_uvr As DataColumn
        
        Private columnhprogrouclos As DataColumn
        
        Private columnhprocodenorm As DataColumn
        
        Private columnhprotypecode As DataColumn
        
        Private columnhprovaliperi As DataColumn
        
        Private columnhprocode_crc As DataColumn
        
        Private columnbookproc_key As DataColumn
        
        Friend Sub New()
            MyBase.New("hpro")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property hpro_keyColumn As DataColumn
            Get
                Return Me.columnhpro_key
            End Get
        End Property
        
        Friend ReadOnly Property hpro_keyfathColumn As DataColumn
            Get
                Return Me.columnhpro_keyfath
            End Get
        End Property
        
        Friend ReadOnly Property hprocodeColumn As DataColumn
            Get
                Return Me.columnhprocode
            End Get
        End Property
        
        Friend ReadOnly Property hprodescshorColumn As DataColumn
            Get
                Return Me.columnhprodescshor
            End Get
        End Property
        
        Friend ReadOnly Property hprodesclongColumn As DataColumn
            Get
                Return Me.columnhprodesclong
            End Get
        End Property
        
        Friend ReadOnly Property hproduraColumn As DataColumn
            Get
                Return Me.columnhprodura
            End Get
        End Property
        
        Friend ReadOnly Property hproleveColumn As DataColumn
            Get
                Return Me.columnhproleve
            End Get
        End Property
        
        Friend ReadOnly Property hproactiColumn As DataColumn
            Get
                Return Me.columnhproacti
            End Get
        End Property
        
        Friend ReadOnly Property hproupdaColumn As DataColumn
            Get
                Return Me.columnhproupda
            End Get
        End Property
        
        Friend ReadOnly Property plancodeColumn As DataColumn
            Get
                Return Me.columnplancode
            End Get
        End Property
        
        Friend ReadOnly Property txts_keyColumn As DataColumn
            Get
                Return Me.columntxts_key
            End Get
        End Property
        
        Friend ReadOnly Property hproordeColumn As DataColumn
            Get
                Return Me.columnhproorde
            End Get
        End Property
        
        Friend ReadOnly Property hpro_uvrColumn As DataColumn
            Get
                Return Me.columnhpro_uvr
            End Get
        End Property
        
        Friend ReadOnly Property hprogrouclosColumn As DataColumn
            Get
                Return Me.columnhprogrouclos
            End Get
        End Property
        
        Friend ReadOnly Property hprocodenormColumn As DataColumn
            Get
                Return Me.columnhprocodenorm
            End Get
        End Property
        
        Friend ReadOnly Property hprotypecodeColumn As DataColumn
            Get
                Return Me.columnhprotypecode
            End Get
        End Property
        
        Friend ReadOnly Property hprovaliperiColumn As DataColumn
            Get
                Return Me.columnhprovaliperi
            End Get
        End Property
        
        Friend ReadOnly Property hprocode_crcColumn As DataColumn
            Get
                Return Me.columnhprocode_crc
            End Get
        End Property
        
        Friend ReadOnly Property bookproc_keyColumn As DataColumn
            Get
                Return Me.columnbookproc_key
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As hproRow
            Get
                Return CType(Me.Rows(index),hproRow)
            End Get
        End Property
        
        Public Event hproRowChanged As hproRowChangeEventHandler
        
        Public Event hproRowChanging As hproRowChangeEventHandler
        
        Public Event hproRowDeleted As hproRowChangeEventHandler
        
        Public Event hproRowDeleting As hproRowChangeEventHandler
        
        Public Overloads Sub AddhproRow(ByVal row As hproRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddhproRow( _
                    ByVal hpro_key As Integer,  _
                    ByVal hpro_keyfath As Integer,  _
                    ByVal hprocode As String,  _
                    ByVal hprodescshor As String,  _
                    ByVal hprodesclong As String,  _
                    ByVal hprodura As Short,  _
                    ByVal hproleve As Short,  _
                    ByVal hproacti As String,  _
                    ByVal hproupda As String,  _
                    ByVal plancode As String,  _
                    ByVal txts_key As Integer,  _
                    ByVal hproorde As Short,  _
                    ByVal hpro_uvr As Decimal,  _
                    ByVal hprogrouclos As String,  _
                    ByVal hprocodenorm As String,  _
                    ByVal hprotypecode As String,  _
                    ByVal hprovaliperi As Integer,  _
                    ByVal hprocode_crc As String,  _
                    ByVal bookproc_key As Integer) As hproRow
            Dim rowhproRow As hproRow = CType(Me.NewRow,hproRow)
            rowhproRow.ItemArray = New Object() {hpro_key, hpro_keyfath, hprocode, hprodescshor, hprodesclong, hprodura, hproleve, hproacti, hproupda, plancode, txts_key, hproorde, hpro_uvr, hprogrouclos, hprocodenorm, hprotypecode, hprovaliperi, hprocode_crc, bookproc_key}
            Me.Rows.Add(rowhproRow)
            Return rowhproRow
        End Function
        
        Public Function FindByhpro_key(ByVal hpro_key As Integer) As hproRow
            Return CType(Me.Rows.Find(New Object() {hpro_key}),hproRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As hproDataTable = CType(MyBase.Clone,hproDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New hproDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnhpro_key = Me.Columns("hpro_key")
            Me.columnhpro_keyfath = Me.Columns("hpro_keyfath")
            Me.columnhprocode = Me.Columns("hprocode")
            Me.columnhprodescshor = Me.Columns("hprodescshor")
            Me.columnhprodesclong = Me.Columns("hprodesclong")
            Me.columnhprodura = Me.Columns("hprodura")
            Me.columnhproleve = Me.Columns("hproleve")
            Me.columnhproacti = Me.Columns("hproacti")
            Me.columnhproupda = Me.Columns("hproupda")
            Me.columnplancode = Me.Columns("plancode")
            Me.columntxts_key = Me.Columns("txts_key")
            Me.columnhproorde = Me.Columns("hproorde")
            Me.columnhpro_uvr = Me.Columns("hpro_uvr")
            Me.columnhprogrouclos = Me.Columns("hprogrouclos")
            Me.columnhprocodenorm = Me.Columns("hprocodenorm")
            Me.columnhprotypecode = Me.Columns("hprotypecode")
            Me.columnhprovaliperi = Me.Columns("hprovaliperi")
            Me.columnhprocode_crc = Me.Columns("hprocode_crc")
            Me.columnbookproc_key = Me.Columns("bookproc_key")
        End Sub
        
        Private Sub InitClass()
            Me.columnhpro_key = New DataColumn("hpro_key", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhpro_key)
            Me.columnhpro_keyfath = New DataColumn("hpro_keyfath", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhpro_keyfath)
            Me.columnhprocode = New DataColumn("hprocode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhprocode)
            Me.columnhprodescshor = New DataColumn("hprodescshor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhprodescshor)
            Me.columnhprodesclong = New DataColumn("hprodesclong", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhprodesclong)
            Me.columnhprodura = New DataColumn("hprodura", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhprodura)
            Me.columnhproleve = New DataColumn("hproleve", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhproleve)
            Me.columnhproacti = New DataColumn("hproacti", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhproacti)
            Me.columnhproupda = New DataColumn("hproupda", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhproupda)
            Me.columnplancode = New DataColumn("plancode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnplancode)
            Me.columntxts_key = New DataColumn("txts_key", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntxts_key)
            Me.columnhproorde = New DataColumn("hproorde", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhproorde)
            Me.columnhpro_uvr = New DataColumn("hpro_uvr", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhpro_uvr)
            Me.columnhprogrouclos = New DataColumn("hprogrouclos", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhprogrouclos)
            Me.columnhprocodenorm = New DataColumn("hprocodenorm", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhprocodenorm)
            Me.columnhprotypecode = New DataColumn("hprotypecode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhprotypecode)
            Me.columnhprovaliperi = New DataColumn("hprovaliperi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhprovaliperi)
            Me.columnhprocode_crc = New DataColumn("hprocode_crc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhprocode_crc)
            Me.columnbookproc_key = New DataColumn("bookproc_key", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbookproc_key)
            Me.Constraints.Add(New UniqueConstraint("ds_hproKey1", New DataColumn() {Me.columnhpro_key}, true))
            Me.columnhpro_key.AllowDBNull = false
            Me.columnhpro_key.Unique = true
            Me.columnhprocode.AllowDBNull = false
            Me.columnhprodescshor.AllowDBNull = false
            Me.columnhproleve.AllowDBNull = false
            Me.columnhproacti.AllowDBNull = false
            Me.columnhproupda.AllowDBNull = false
            Me.columnplancode.AllowDBNull = false
        End Sub
        
        Public Function NewhproRow() As hproRow
            Return CType(Me.NewRow,hproRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New hproRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(hproRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.hproRowChangedEvent) Is Nothing) Then
                RaiseEvent hproRowChanged(Me, New hproRowChangeEvent(CType(e.Row,hproRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.hproRowChangingEvent) Is Nothing) Then
                RaiseEvent hproRowChanging(Me, New hproRowChangeEvent(CType(e.Row,hproRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.hproRowDeletedEvent) Is Nothing) Then
                RaiseEvent hproRowDeleted(Me, New hproRowChangeEvent(CType(e.Row,hproRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.hproRowDeletingEvent) Is Nothing) Then
                RaiseEvent hproRowDeleting(Me, New hproRowChangeEvent(CType(e.Row,hproRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovehproRow(ByVal row As hproRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class hproRow
        Inherits DataRow
        
        Private tablehpro As hproDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablehpro = CType(Me.Table,hproDataTable)
        End Sub
        
        Public Property hpro_key As Integer
            Get
                Return CType(Me(Me.tablehpro.hpro_keyColumn),Integer)
            End Get
            Set
                Me(Me.tablehpro.hpro_keyColumn) = value
            End Set
        End Property
        
        Public Property hpro_keyfath As Integer
            Get
                Try 
                    Return CType(Me(Me.tablehpro.hpro_keyfathColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehpro.hpro_keyfathColumn) = value
            End Set
        End Property
        
        Public Property hprocode As String
            Get
                Return CType(Me(Me.tablehpro.hprocodeColumn),String)
            End Get
            Set
                Me(Me.tablehpro.hprocodeColumn) = value
            End Set
        End Property
        
        Public Property hprodescshor As String
            Get
                Return CType(Me(Me.tablehpro.hprodescshorColumn),String)
            End Get
            Set
                Me(Me.tablehpro.hprodescshorColumn) = value
            End Set
        End Property
        
        Public Property hprodesclong As String
            Get
                Try 
                    Return CType(Me(Me.tablehpro.hprodesclongColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehpro.hprodesclongColumn) = value
            End Set
        End Property
        
        Public Property hprodura As Short
            Get
                Try 
                    Return CType(Me(Me.tablehpro.hproduraColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehpro.hproduraColumn) = value
            End Set
        End Property
        
        Public Property hproleve As Short
            Get
                Return CType(Me(Me.tablehpro.hproleveColumn),Short)
            End Get
            Set
                Me(Me.tablehpro.hproleveColumn) = value
            End Set
        End Property
        
        Public Property hproacti As String
            Get
                Return CType(Me(Me.tablehpro.hproactiColumn),String)
            End Get
            Set
                Me(Me.tablehpro.hproactiColumn) = value
            End Set
        End Property
        
        Public Property hproupda As String
            Get
                Return CType(Me(Me.tablehpro.hproupdaColumn),String)
            End Get
            Set
                Me(Me.tablehpro.hproupdaColumn) = value
            End Set
        End Property
        
        Public Property plancode As String
            Get
                Return CType(Me(Me.tablehpro.plancodeColumn),String)
            End Get
            Set
                Me(Me.tablehpro.plancodeColumn) = value
            End Set
        End Property
        
        Public Property txts_key As Integer
            Get
                Try 
                    Return CType(Me(Me.tablehpro.txts_keyColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehpro.txts_keyColumn) = value
            End Set
        End Property
        
        Public Property hproorde As Short
            Get
                Try 
                    Return CType(Me(Me.tablehpro.hproordeColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehpro.hproordeColumn) = value
            End Set
        End Property
        
        Public Property hpro_uvr As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablehpro.hpro_uvrColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehpro.hpro_uvrColumn) = value
            End Set
        End Property
        
        Public Property hprogrouclos As String
            Get
                Try 
                    Return CType(Me(Me.tablehpro.hprogrouclosColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehpro.hprogrouclosColumn) = value
            End Set
        End Property
        
        Public Property hprocodenorm As String
            Get
                Try 
                    Return CType(Me(Me.tablehpro.hprocodenormColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehpro.hprocodenormColumn) = value
            End Set
        End Property
        
        Public Property hprotypecode As String
            Get
                Try 
                    Return CType(Me(Me.tablehpro.hprotypecodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehpro.hprotypecodeColumn) = value
            End Set
        End Property
        
        Public Property hprovaliperi As Integer
            Get
                Try 
                    Return CType(Me(Me.tablehpro.hprovaliperiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehpro.hprovaliperiColumn) = value
            End Set
        End Property
        
        Public Property hprocode_crc As String
            Get
                Try 
                    Return CType(Me(Me.tablehpro.hprocode_crcColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehpro.hprocode_crcColumn) = value
            End Set
        End Property
        
        Public Property bookproc_key As Integer
            Get
                Try 
                    Return CType(Me(Me.tablehpro.bookproc_keyColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehpro.bookproc_keyColumn) = value
            End Set
        End Property
        
        Public Function Ishpro_keyfathNull() As Boolean
            Return Me.IsNull(Me.tablehpro.hpro_keyfathColumn)
        End Function
        
        Public Sub Sethpro_keyfathNull()
            Me(Me.tablehpro.hpro_keyfathColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshprodesclongNull() As Boolean
            Return Me.IsNull(Me.tablehpro.hprodesclongColumn)
        End Function
        
        Public Sub SethprodesclongNull()
            Me(Me.tablehpro.hprodesclongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshproduraNull() As Boolean
            Return Me.IsNull(Me.tablehpro.hproduraColumn)
        End Function
        
        Public Sub SethproduraNull()
            Me(Me.tablehpro.hproduraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istxts_keyNull() As Boolean
            Return Me.IsNull(Me.tablehpro.txts_keyColumn)
        End Function
        
        Public Sub Settxts_keyNull()
            Me(Me.tablehpro.txts_keyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshproordeNull() As Boolean
            Return Me.IsNull(Me.tablehpro.hproordeColumn)
        End Function
        
        Public Sub SethproordeNull()
            Me(Me.tablehpro.hproordeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ishpro_uvrNull() As Boolean
            Return Me.IsNull(Me.tablehpro.hpro_uvrColumn)
        End Function
        
        Public Sub Sethpro_uvrNull()
            Me(Me.tablehpro.hpro_uvrColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshprogrouclosNull() As Boolean
            Return Me.IsNull(Me.tablehpro.hprogrouclosColumn)
        End Function
        
        Public Sub SethprogrouclosNull()
            Me(Me.tablehpro.hprogrouclosColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshprocodenormNull() As Boolean
            Return Me.IsNull(Me.tablehpro.hprocodenormColumn)
        End Function
        
        Public Sub SethprocodenormNull()
            Me(Me.tablehpro.hprocodenormColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshprotypecodeNull() As Boolean
            Return Me.IsNull(Me.tablehpro.hprotypecodeColumn)
        End Function
        
        Public Sub SethprotypecodeNull()
            Me(Me.tablehpro.hprotypecodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshprovaliperiNull() As Boolean
            Return Me.IsNull(Me.tablehpro.hprovaliperiColumn)
        End Function
        
        Public Sub SethprovaliperiNull()
            Me(Me.tablehpro.hprovaliperiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ishprocode_crcNull() As Boolean
            Return Me.IsNull(Me.tablehpro.hprocode_crcColumn)
        End Function
        
        Public Sub Sethprocode_crcNull()
            Me(Me.tablehpro.hprocode_crcColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isbookproc_keyNull() As Boolean
            Return Me.IsNull(Me.tablehpro.bookproc_keyColumn)
        End Function
        
        Public Sub Setbookproc_keyNull()
            Me(Me.tablehpro.bookproc_keyColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class hproRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As hproRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As hproRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As hproRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
