'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ds_plantillas
    Inherits DataSet
    
    Private tablecima_plantillas As cima_plantillasDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("cima_plantillas")) Is Nothing) Then
                Me.Tables.Add(New cima_plantillasDataTable(ds.Tables("cima_plantillas")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cima_plantillas As cima_plantillasDataTable
        Get
            Return Me.tablecima_plantillas
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ds_plantillas = CType(MyBase.Clone,ds_plantillas)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("cima_plantillas")) Is Nothing) Then
            Me.Tables.Add(New cima_plantillasDataTable(ds.Tables("cima_plantillas")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablecima_plantillas = CType(Me.Tables("cima_plantillas"),cima_plantillasDataTable)
        If (Not (Me.tablecima_plantillas) Is Nothing) Then
            Me.tablecima_plantillas.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ds_plantillas"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ds_plantillas.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablecima_plantillas = New cima_plantillasDataTable
        Me.Tables.Add(Me.tablecima_plantillas)
    End Sub
    
    Private Function ShouldSerializecima_plantillas() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub cima_plantillasRowChangeEventHandler(ByVal sender As Object, ByVal e As cima_plantillasRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cima_plantillasDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_plantilla As DataColumn
        
        Private columnversion As DataColumn
        
        Private columndescripcion As DataColumn
        
        Private columnacceso_libre As DataColumn
        
        Private columninformacion As DataColumn
        
        Private columnid_propietario As DataColumn
        
        Private columnfecha_creacion As DataColumn
        
        Private columnpermiso_acceso As DataColumn
        
        Private columnconsentimiento As DataColumn
        
        Friend Sub New()
            MyBase.New("cima_plantillas")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_plantillaColumn As DataColumn
            Get
                Return Me.columnid_plantilla
            End Get
        End Property
        
        Friend ReadOnly Property versionColumn As DataColumn
            Get
                Return Me.columnversion
            End Get
        End Property
        
        Friend ReadOnly Property descripcionColumn As DataColumn
            Get
                Return Me.columndescripcion
            End Get
        End Property
        
        Friend ReadOnly Property acceso_libreColumn As DataColumn
            Get
                Return Me.columnacceso_libre
            End Get
        End Property
        
        Friend ReadOnly Property informacionColumn As DataColumn
            Get
                Return Me.columninformacion
            End Get
        End Property
        
        Friend ReadOnly Property id_propietarioColumn As DataColumn
            Get
                Return Me.columnid_propietario
            End Get
        End Property
        
        Friend ReadOnly Property fecha_creacionColumn As DataColumn
            Get
                Return Me.columnfecha_creacion
            End Get
        End Property
        
        Friend ReadOnly Property permiso_accesoColumn As DataColumn
            Get
                Return Me.columnpermiso_acceso
            End Get
        End Property
        
        Friend ReadOnly Property consentimientoColumn As DataColumn
            Get
                Return Me.columnconsentimiento
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As cima_plantillasRow
            Get
                Return CType(Me.Rows(index),cima_plantillasRow)
            End Get
        End Property
        
        Public Event cima_plantillasRowChanged As cima_plantillasRowChangeEventHandler
        
        Public Event cima_plantillasRowChanging As cima_plantillasRowChangeEventHandler
        
        Public Event cima_plantillasRowDeleted As cima_plantillasRowChangeEventHandler
        
        Public Event cima_plantillasRowDeleting As cima_plantillasRowChangeEventHandler
        
        Public Overloads Sub Addcima_plantillasRow(ByVal row As cima_plantillasRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addcima_plantillasRow(ByVal version As Integer, ByVal descripcion As String, ByVal acceso_libre As String, ByVal informacion As String, ByVal id_propietario As String, ByVal fecha_creacion As Date, ByVal permiso_acceso As Integer, ByVal consentimiento As String) As cima_plantillasRow
            Dim rowcima_plantillasRow As cima_plantillasRow = CType(Me.NewRow,cima_plantillasRow)
            rowcima_plantillasRow.ItemArray = New Object() {Nothing, version, descripcion, acceso_libre, informacion, id_propietario, fecha_creacion, permiso_acceso, consentimiento}
            Me.Rows.Add(rowcima_plantillasRow)
            Return rowcima_plantillasRow
        End Function
        
        Public Function FindByid_plantilla(ByVal id_plantilla As Integer) As cima_plantillasRow
            Return CType(Me.Rows.Find(New Object() {id_plantilla}),cima_plantillasRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As cima_plantillasDataTable = CType(MyBase.Clone,cima_plantillasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New cima_plantillasDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_plantilla = Me.Columns("id_plantilla")
            Me.columnversion = Me.Columns("version")
            Me.columndescripcion = Me.Columns("descripcion")
            Me.columnacceso_libre = Me.Columns("acceso_libre")
            Me.columninformacion = Me.Columns("informacion")
            Me.columnid_propietario = Me.Columns("id_propietario")
            Me.columnfecha_creacion = Me.Columns("fecha_creacion")
            Me.columnpermiso_acceso = Me.Columns("permiso_acceso")
            Me.columnconsentimiento = Me.Columns("consentimiento")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_plantilla = New DataColumn("id_plantilla", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_plantilla)
            Me.columnversion = New DataColumn("version", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnversion)
            Me.columndescripcion = New DataColumn("descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescripcion)
            Me.columnacceso_libre = New DataColumn("acceso_libre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnacceso_libre)
            Me.columninformacion = New DataColumn("informacion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columninformacion)
            Me.columnid_propietario = New DataColumn("id_propietario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_propietario)
            Me.columnfecha_creacion = New DataColumn("fecha_creacion", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfecha_creacion)
            Me.columnpermiso_acceso = New DataColumn("permiso_acceso", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpermiso_acceso)
            Me.columnconsentimiento = New DataColumn("consentimiento", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnconsentimiento)
            Me.Constraints.Add(New UniqueConstraint("ds_plantillasKey1", New DataColumn() {Me.columnid_plantilla}, true))
            Me.columnid_plantilla.AutoIncrement = true
            Me.columnid_plantilla.AllowDBNull = false
            Me.columnid_plantilla.ReadOnly = true
            Me.columnid_plantilla.Unique = true
            Me.columnversion.AllowDBNull = false
        End Sub
        
        Public Function Newcima_plantillasRow() As cima_plantillasRow
            Return CType(Me.NewRow,cima_plantillasRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New cima_plantillasRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(cima_plantillasRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cima_plantillasRowChangedEvent) Is Nothing) Then
                RaiseEvent cima_plantillasRowChanged(Me, New cima_plantillasRowChangeEvent(CType(e.Row,cima_plantillasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cima_plantillasRowChangingEvent) Is Nothing) Then
                RaiseEvent cima_plantillasRowChanging(Me, New cima_plantillasRowChangeEvent(CType(e.Row,cima_plantillasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cima_plantillasRowDeletedEvent) Is Nothing) Then
                RaiseEvent cima_plantillasRowDeleted(Me, New cima_plantillasRowChangeEvent(CType(e.Row,cima_plantillasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cima_plantillasRowDeletingEvent) Is Nothing) Then
                RaiseEvent cima_plantillasRowDeleting(Me, New cima_plantillasRowChangeEvent(CType(e.Row,cima_plantillasRow), e.Action))
            End If
        End Sub
        
        Public Sub Removecima_plantillasRow(ByVal row As cima_plantillasRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cima_plantillasRow
        Inherits DataRow
        
        Private tablecima_plantillas As cima_plantillasDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecima_plantillas = CType(Me.Table,cima_plantillasDataTable)
        End Sub
        
        Public Property id_plantilla As Integer
            Get
                Return CType(Me(Me.tablecima_plantillas.id_plantillaColumn),Integer)
            End Get
            Set
                Me(Me.tablecima_plantillas.id_plantillaColumn) = value
            End Set
        End Property
        
        Public Property version As Integer
            Get
                Return CType(Me(Me.tablecima_plantillas.versionColumn),Integer)
            End Get
            Set
                Me(Me.tablecima_plantillas.versionColumn) = value
            End Set
        End Property
        
        Public Property descripcion As String
            Get
                Try 
                    Return CType(Me(Me.tablecima_plantillas.descripcionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecima_plantillas.descripcionColumn) = value
            End Set
        End Property
        
        Public Property acceso_libre As String
            Get
                Try 
                    Return CType(Me(Me.tablecima_plantillas.acceso_libreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecima_plantillas.acceso_libreColumn) = value
            End Set
        End Property
        
        Public Property informacion As String
            Get
                Try 
                    Return CType(Me(Me.tablecima_plantillas.informacionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecima_plantillas.informacionColumn) = value
            End Set
        End Property
        
        Public Property id_propietario As String
            Get
                Try 
                    Return CType(Me(Me.tablecima_plantillas.id_propietarioColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecima_plantillas.id_propietarioColumn) = value
            End Set
        End Property
        
        Public Property fecha_creacion As Date
            Get
                Try 
                    Return CType(Me(Me.tablecima_plantillas.fecha_creacionColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecima_plantillas.fecha_creacionColumn) = value
            End Set
        End Property
        
        Public Property permiso_acceso As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecima_plantillas.permiso_accesoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecima_plantillas.permiso_accesoColumn) = value
            End Set
        End Property
        
        Public Property consentimiento As String
            Get
                Try 
                    Return CType(Me(Me.tablecima_plantillas.consentimientoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecima_plantillas.consentimientoColumn) = value
            End Set
        End Property
        
        Public Function IsdescripcionNull() As Boolean
            Return Me.IsNull(Me.tablecima_plantillas.descripcionColumn)
        End Function
        
        Public Sub SetdescripcionNull()
            Me(Me.tablecima_plantillas.descripcionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isacceso_libreNull() As Boolean
            Return Me.IsNull(Me.tablecima_plantillas.acceso_libreColumn)
        End Function
        
        Public Sub Setacceso_libreNull()
            Me(Me.tablecima_plantillas.acceso_libreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsinformacionNull() As Boolean
            Return Me.IsNull(Me.tablecima_plantillas.informacionColumn)
        End Function
        
        Public Sub SetinformacionNull()
            Me(Me.tablecima_plantillas.informacionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_propietarioNull() As Boolean
            Return Me.IsNull(Me.tablecima_plantillas.id_propietarioColumn)
        End Function
        
        Public Sub Setid_propietarioNull()
            Me(Me.tablecima_plantillas.id_propietarioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfecha_creacionNull() As Boolean
            Return Me.IsNull(Me.tablecima_plantillas.fecha_creacionColumn)
        End Function
        
        Public Sub Setfecha_creacionNull()
            Me(Me.tablecima_plantillas.fecha_creacionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispermiso_accesoNull() As Boolean
            Return Me.IsNull(Me.tablecima_plantillas.permiso_accesoColumn)
        End Function
        
        Public Sub Setpermiso_accesoNull()
            Me(Me.tablecima_plantillas.permiso_accesoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsconsentimientoNull() As Boolean
            Return Me.IsNull(Me.tablecima_plantillas.consentimientoColumn)
        End Function
        
        Public Sub SetconsentimientoNull()
            Me(Me.tablecima_plantillas.consentimientoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cima_plantillasRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As cima_plantillasRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As cima_plantillasRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As cima_plantillasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
