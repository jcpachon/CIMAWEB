'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2300
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ds_reso
    Inherits DataSet
    
    Private tablereso As resoDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("reso")) Is Nothing) Then
                Me.Tables.Add(New resoDataTable(ds.Tables("reso")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property reso As resoDataTable
        Get
            Return Me.tablereso
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ds_reso = CType(MyBase.Clone,ds_reso)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("reso")) Is Nothing) Then
            Me.Tables.Add(New resoDataTable(ds.Tables("reso")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablereso = CType(Me.Tables("reso"),resoDataTable)
        If (Not (Me.tablereso) Is Nothing) Then
            Me.tablereso.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ds_reso"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ds_reso.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablereso = New resoDataTable
        Me.Tables.Add(Me.tablereso)
    End Sub
    
    Private Function ShouldSerializereso() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub resoRowChangeEventHandler(ByVal sender As Object, ByVal e As resoRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class resoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columntablcode As DataColumn
        
        Private columnreso_key As DataColumn
        
        Private columnresodesc As DataColumn
        
        Private columnmsrepl_tran_version As DataColumn
        
        Private columncent_key As DataColumn
        
        Friend Sub New()
            MyBase.New("reso")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property tablcodeColumn As DataColumn
            Get
                Return Me.columntablcode
            End Get
        End Property
        
        Friend ReadOnly Property reso_keyColumn As DataColumn
            Get
                Return Me.columnreso_key
            End Get
        End Property
        
        Friend ReadOnly Property resodescColumn As DataColumn
            Get
                Return Me.columnresodesc
            End Get
        End Property
        
        Friend ReadOnly Property msrepl_tran_versionColumn As DataColumn
            Get
                Return Me.columnmsrepl_tran_version
            End Get
        End Property
        
        Friend ReadOnly Property cent_keyColumn As DataColumn
            Get
                Return Me.columncent_key
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As resoRow
            Get
                Return CType(Me.Rows(index),resoRow)
            End Get
        End Property
        
        Public Event resoRowChanged As resoRowChangeEventHandler
        
        Public Event resoRowChanging As resoRowChangeEventHandler
        
        Public Event resoRowDeleted As resoRowChangeEventHandler
        
        Public Event resoRowDeleting As resoRowChangeEventHandler
        
        Public Overloads Sub AddresoRow(ByVal row As resoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddresoRow(ByVal tablcode As String, ByVal reso_key As Integer, ByVal resodesc As String, ByVal msrepl_tran_version As System.Guid, ByVal cent_key As Integer) As resoRow
            Dim rowresoRow As resoRow = CType(Me.NewRow,resoRow)
            rowresoRow.ItemArray = New Object() {tablcode, reso_key, resodesc, msrepl_tran_version, cent_key}
            Me.Rows.Add(rowresoRow)
            Return rowresoRow
        End Function
        
        Public Function FindBytablcodereso_key(ByVal tablcode As String, ByVal reso_key As Integer) As resoRow
            Return CType(Me.Rows.Find(New Object() {tablcode, reso_key}),resoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As resoDataTable = CType(MyBase.Clone,resoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New resoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columntablcode = Me.Columns("tablcode")
            Me.columnreso_key = Me.Columns("reso_key")
            Me.columnresodesc = Me.Columns("resodesc")
            Me.columnmsrepl_tran_version = Me.Columns("msrepl_tran_version")
            Me.columncent_key = Me.Columns("cent_key")
        End Sub
        
        Private Sub InitClass()
            Me.columntablcode = New DataColumn("tablcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntablcode)
            Me.columnreso_key = New DataColumn("reso_key", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnreso_key)
            Me.columnresodesc = New DataColumn("resodesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnresodesc)
            Me.columnmsrepl_tran_version = New DataColumn("msrepl_tran_version", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmsrepl_tran_version)
            Me.columncent_key = New DataColumn("cent_key", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncent_key)
            Me.Constraints.Add(New UniqueConstraint("ds_resoKey1", New DataColumn() {Me.columntablcode, Me.columnreso_key}, true))
            Me.columntablcode.AllowDBNull = false
            Me.columnreso_key.AllowDBNull = false
            Me.columnmsrepl_tran_version.AllowDBNull = false
        End Sub
        
        Public Function NewresoRow() As resoRow
            Return CType(Me.NewRow,resoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New resoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(resoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.resoRowChangedEvent) Is Nothing) Then
                RaiseEvent resoRowChanged(Me, New resoRowChangeEvent(CType(e.Row,resoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.resoRowChangingEvent) Is Nothing) Then
                RaiseEvent resoRowChanging(Me, New resoRowChangeEvent(CType(e.Row,resoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.resoRowDeletedEvent) Is Nothing) Then
                RaiseEvent resoRowDeleted(Me, New resoRowChangeEvent(CType(e.Row,resoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.resoRowDeletingEvent) Is Nothing) Then
                RaiseEvent resoRowDeleting(Me, New resoRowChangeEvent(CType(e.Row,resoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveresoRow(ByVal row As resoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class resoRow
        Inherits DataRow
        
        Private tablereso As resoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablereso = CType(Me.Table,resoDataTable)
        End Sub
        
        Public Property tablcode As String
            Get
                Return CType(Me(Me.tablereso.tablcodeColumn),String)
            End Get
            Set
                Me(Me.tablereso.tablcodeColumn) = value
            End Set
        End Property
        
        Public Property reso_key As Integer
            Get
                Return CType(Me(Me.tablereso.reso_keyColumn),Integer)
            End Get
            Set
                Me(Me.tablereso.reso_keyColumn) = value
            End Set
        End Property
        
        Public Property resodesc As String
            Get
                Try 
                    Return CType(Me(Me.tablereso.resodescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereso.resodescColumn) = value
            End Set
        End Property
        
        Public Property msrepl_tran_version As System.Guid
            Get
                Return CType(Me(Me.tablereso.msrepl_tran_versionColumn),System.Guid)
            End Get
            Set
                Me(Me.tablereso.msrepl_tran_versionColumn) = value
            End Set
        End Property
        
        Public Property cent_key As Integer
            Get
                Try 
                    Return CType(Me(Me.tablereso.cent_keyColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereso.cent_keyColumn) = value
            End Set
        End Property
        
        Public Function IsresodescNull() As Boolean
            Return Me.IsNull(Me.tablereso.resodescColumn)
        End Function
        
        Public Sub SetresodescNull()
            Me(Me.tablereso.resodescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscent_keyNull() As Boolean
            Return Me.IsNull(Me.tablereso.cent_keyColumn)
        End Function
        
        Public Sub Setcent_keyNull()
            Me(Me.tablereso.cent_keyColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class resoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As resoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As resoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As resoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
