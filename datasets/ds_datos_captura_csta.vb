'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2300
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ds_datos_captura_csta
    Inherits DataSet
    
    Private tablecsta As cstaDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("csta")) Is Nothing) Then
                Me.Tables.Add(New cstaDataTable(ds.Tables("csta")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property csta As cstaDataTable
        Get
            Return Me.tablecsta
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ds_datos_captura_csta = CType(MyBase.Clone,ds_datos_captura_csta)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("csta")) Is Nothing) Then
            Me.Tables.Add(New cstaDataTable(ds.Tables("csta")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablecsta = CType(Me.Tables("csta"),cstaDataTable)
        If (Not (Me.tablecsta) Is Nothing) Then
            Me.tablecsta.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ds_datos_captura_csta"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ds_datos_captura_csta.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablecsta = New cstaDataTable
        Me.Tables.Add(Me.tablecsta)
    End Sub
    
    Private Function ShouldSerializecsta() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub cstaRowChangeEventHandler(ByVal sender As Object, ByVal e As cstaRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cstaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncsta_keymake As DataColumn
        
        Private columncstahper_keymake As DataColumn
        
        Private columncstahper_keyinfo As DataColumn
        
        Private columninsicode As DataColumn
        
        Friend Sub New()
            MyBase.New("csta")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property csta_keymakeColumn As DataColumn
            Get
                Return Me.columncsta_keymake
            End Get
        End Property
        
        Friend ReadOnly Property cstahper_keymakeColumn As DataColumn
            Get
                Return Me.columncstahper_keymake
            End Get
        End Property
        
        Friend ReadOnly Property cstahper_keyinfoColumn As DataColumn
            Get
                Return Me.columncstahper_keyinfo
            End Get
        End Property
        
        Friend ReadOnly Property insicodeColumn As DataColumn
            Get
                Return Me.columninsicode
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As cstaRow
            Get
                Return CType(Me.Rows(index),cstaRow)
            End Get
        End Property
        
        Public Event cstaRowChanged As cstaRowChangeEventHandler
        
        Public Event cstaRowChanging As cstaRowChangeEventHandler
        
        Public Event cstaRowDeleted As cstaRowChangeEventHandler
        
        Public Event cstaRowDeleting As cstaRowChangeEventHandler
        
        Public Overloads Sub AddcstaRow(ByVal row As cstaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddcstaRow(ByVal csta_keymake As Integer, ByVal cstahper_keymake As Integer, ByVal cstahper_keyinfo As Integer, ByVal insicode As String) As cstaRow
            Dim rowcstaRow As cstaRow = CType(Me.NewRow,cstaRow)
            rowcstaRow.ItemArray = New Object() {csta_keymake, cstahper_keymake, cstahper_keyinfo, insicode}
            Me.Rows.Add(rowcstaRow)
            Return rowcstaRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As cstaDataTable = CType(MyBase.Clone,cstaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New cstaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncsta_keymake = Me.Columns("csta_keymake")
            Me.columncstahper_keymake = Me.Columns("cstahper_keymake")
            Me.columncstahper_keyinfo = Me.Columns("cstahper_keyinfo")
            Me.columninsicode = Me.Columns("insicode")
        End Sub
        
        Private Sub InitClass()
            Me.columncsta_keymake = New DataColumn("csta_keymake", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncsta_keymake)
            Me.columncstahper_keymake = New DataColumn("cstahper_keymake", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncstahper_keymake)
            Me.columncstahper_keyinfo = New DataColumn("cstahper_keyinfo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncstahper_keyinfo)
            Me.columninsicode = New DataColumn("insicode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columninsicode)
        End Sub
        
        Public Function NewcstaRow() As cstaRow
            Return CType(Me.NewRow,cstaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New cstaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(cstaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cstaRowChangedEvent) Is Nothing) Then
                RaiseEvent cstaRowChanged(Me, New cstaRowChangeEvent(CType(e.Row,cstaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cstaRowChangingEvent) Is Nothing) Then
                RaiseEvent cstaRowChanging(Me, New cstaRowChangeEvent(CType(e.Row,cstaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cstaRowDeletedEvent) Is Nothing) Then
                RaiseEvent cstaRowDeleted(Me, New cstaRowChangeEvent(CType(e.Row,cstaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cstaRowDeletingEvent) Is Nothing) Then
                RaiseEvent cstaRowDeleting(Me, New cstaRowChangeEvent(CType(e.Row,cstaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovecstaRow(ByVal row As cstaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cstaRow
        Inherits DataRow
        
        Private tablecsta As cstaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecsta = CType(Me.Table,cstaDataTable)
        End Sub
        
        Public Property csta_keymake As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecsta.csta_keymakeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecsta.csta_keymakeColumn) = value
            End Set
        End Property
        
        Public Property cstahper_keymake As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecsta.cstahper_keymakeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecsta.cstahper_keymakeColumn) = value
            End Set
        End Property
        
        Public Property cstahper_keyinfo As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecsta.cstahper_keyinfoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecsta.cstahper_keyinfoColumn) = value
            End Set
        End Property
        
        Public Property insicode As String
            Get
                Try 
                    Return CType(Me(Me.tablecsta.insicodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecsta.insicodeColumn) = value
            End Set
        End Property
        
        Public Function Iscsta_keymakeNull() As Boolean
            Return Me.IsNull(Me.tablecsta.csta_keymakeColumn)
        End Function
        
        Public Sub Setcsta_keymakeNull()
            Me(Me.tablecsta.csta_keymakeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscstahper_keymakeNull() As Boolean
            Return Me.IsNull(Me.tablecsta.cstahper_keymakeColumn)
        End Function
        
        Public Sub Setcstahper_keymakeNull()
            Me(Me.tablecsta.cstahper_keymakeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscstahper_keyinfoNull() As Boolean
            Return Me.IsNull(Me.tablecsta.cstahper_keyinfoColumn)
        End Function
        
        Public Sub Setcstahper_keyinfoNull()
            Me(Me.tablecsta.cstahper_keyinfoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsinsicodeNull() As Boolean
            Return Me.IsNull(Me.tablecsta.insicodeColumn)
        End Function
        
        Public Sub SetinsicodeNull()
            Me(Me.tablecsta.insicodeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cstaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As cstaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As cstaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As cstaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
