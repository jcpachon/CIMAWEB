'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ds_tsex
    Inherits DataSet
    
    Private tabletsex As tsexDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("tsex")) Is Nothing) Then
                Me.Tables.Add(New tsexDataTable(ds.Tables("tsex")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tsex As tsexDataTable
        Get
            Return Me.tabletsex
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ds_tsex = CType(MyBase.Clone,ds_tsex)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("tsex")) Is Nothing) Then
            Me.Tables.Add(New tsexDataTable(ds.Tables("tsex")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tabletsex = CType(Me.Tables("tsex"),tsexDataTable)
        If (Not (Me.tabletsex) Is Nothing) Then
            Me.tabletsex.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ds_tsex"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ds_tsex.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tabletsex = New tsexDataTable
        Me.Tables.Add(Me.tabletsex)
    End Sub
    
    Private Function ShouldSerializetsex() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub tsexRowChangeEventHandler(ByVal sender As Object, ByVal e As tsexRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tsexDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columntsexcode As DataColumn
        
        Private columntsexdesc As DataColumn
        
        Private columntsexacti As DataColumn
        
        Private columntsexupda As DataColumn
        
        Private columntsexorde As DataColumn
        
        Private columntsexcmbd As DataColumn
        
        Friend Sub New()
            MyBase.New("tsex")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property tsexcodeColumn As DataColumn
            Get
                Return Me.columntsexcode
            End Get
        End Property
        
        Friend ReadOnly Property tsexdescColumn As DataColumn
            Get
                Return Me.columntsexdesc
            End Get
        End Property
        
        Friend ReadOnly Property tsexactiColumn As DataColumn
            Get
                Return Me.columntsexacti
            End Get
        End Property
        
        Friend ReadOnly Property tsexupdaColumn As DataColumn
            Get
                Return Me.columntsexupda
            End Get
        End Property
        
        Friend ReadOnly Property tsexordeColumn As DataColumn
            Get
                Return Me.columntsexorde
            End Get
        End Property
        
        Friend ReadOnly Property tsexcmbdColumn As DataColumn
            Get
                Return Me.columntsexcmbd
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tsexRow
            Get
                Return CType(Me.Rows(index),tsexRow)
            End Get
        End Property
        
        Public Event tsexRowChanged As tsexRowChangeEventHandler
        
        Public Event tsexRowChanging As tsexRowChangeEventHandler
        
        Public Event tsexRowDeleted As tsexRowChangeEventHandler
        
        Public Event tsexRowDeleting As tsexRowChangeEventHandler
        
        Public Overloads Sub AddtsexRow(ByVal row As tsexRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtsexRow(ByVal tsexcode As String, ByVal tsexdesc As String, ByVal tsexacti As String, ByVal tsexupda As String, ByVal tsexorde As Short, ByVal tsexcmbd As String) As tsexRow
            Dim rowtsexRow As tsexRow = CType(Me.NewRow,tsexRow)
            rowtsexRow.ItemArray = New Object() {tsexcode, tsexdesc, tsexacti, tsexupda, tsexorde, tsexcmbd}
            Me.Rows.Add(rowtsexRow)
            Return rowtsexRow
        End Function
        
        Public Function FindBytsexcode(ByVal tsexcode As String) As tsexRow
            Return CType(Me.Rows.Find(New Object() {tsexcode}),tsexRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tsexDataTable = CType(MyBase.Clone,tsexDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tsexDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columntsexcode = Me.Columns("tsexcode")
            Me.columntsexdesc = Me.Columns("tsexdesc")
            Me.columntsexacti = Me.Columns("tsexacti")
            Me.columntsexupda = Me.Columns("tsexupda")
            Me.columntsexorde = Me.Columns("tsexorde")
            Me.columntsexcmbd = Me.Columns("tsexcmbd")
        End Sub
        
        Private Sub InitClass()
            Me.columntsexcode = New DataColumn("tsexcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntsexcode)
            Me.columntsexdesc = New DataColumn("tsexdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntsexdesc)
            Me.columntsexacti = New DataColumn("tsexacti", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntsexacti)
            Me.columntsexupda = New DataColumn("tsexupda", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntsexupda)
            Me.columntsexorde = New DataColumn("tsexorde", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntsexorde)
            Me.columntsexcmbd = New DataColumn("tsexcmbd", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntsexcmbd)
            Me.Constraints.Add(New UniqueConstraint("ds_tsexKey1", New DataColumn() {Me.columntsexcode}, true))
            Me.columntsexcode.AllowDBNull = false
            Me.columntsexcode.Unique = true
            Me.columntsexacti.AllowDBNull = false
            Me.columntsexupda.AllowDBNull = false
            Me.columntsexorde.AllowDBNull = false
        End Sub
        
        Public Function NewtsexRow() As tsexRow
            Return CType(Me.NewRow,tsexRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tsexRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tsexRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tsexRowChangedEvent) Is Nothing) Then
                RaiseEvent tsexRowChanged(Me, New tsexRowChangeEvent(CType(e.Row,tsexRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tsexRowChangingEvent) Is Nothing) Then
                RaiseEvent tsexRowChanging(Me, New tsexRowChangeEvent(CType(e.Row,tsexRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tsexRowDeletedEvent) Is Nothing) Then
                RaiseEvent tsexRowDeleted(Me, New tsexRowChangeEvent(CType(e.Row,tsexRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tsexRowDeletingEvent) Is Nothing) Then
                RaiseEvent tsexRowDeleting(Me, New tsexRowChangeEvent(CType(e.Row,tsexRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetsexRow(ByVal row As tsexRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tsexRow
        Inherits DataRow
        
        Private tabletsex As tsexDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletsex = CType(Me.Table,tsexDataTable)
        End Sub
        
        Public Property tsexcode As String
            Get
                Return CType(Me(Me.tabletsex.tsexcodeColumn),String)
            End Get
            Set
                Me(Me.tabletsex.tsexcodeColumn) = value
            End Set
        End Property
        
        Public Property tsexdesc As String
            Get
                Try 
                    Return CType(Me(Me.tabletsex.tsexdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletsex.tsexdescColumn) = value
            End Set
        End Property
        
        Public Property tsexacti As String
            Get
                Return CType(Me(Me.tabletsex.tsexactiColumn),String)
            End Get
            Set
                Me(Me.tabletsex.tsexactiColumn) = value
            End Set
        End Property
        
        Public Property tsexupda As String
            Get
                Return CType(Me(Me.tabletsex.tsexupdaColumn),String)
            End Get
            Set
                Me(Me.tabletsex.tsexupdaColumn) = value
            End Set
        End Property
        
        Public Property tsexorde As Short
            Get
                Return CType(Me(Me.tabletsex.tsexordeColumn),Short)
            End Get
            Set
                Me(Me.tabletsex.tsexordeColumn) = value
            End Set
        End Property
        
        Public Property tsexcmbd As String
            Get
                Try 
                    Return CType(Me(Me.tabletsex.tsexcmbdColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletsex.tsexcmbdColumn) = value
            End Set
        End Property
        
        Public Function IstsexdescNull() As Boolean
            Return Me.IsNull(Me.tabletsex.tsexdescColumn)
        End Function
        
        Public Sub SettsexdescNull()
            Me(Me.tabletsex.tsexdescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstsexcmbdNull() As Boolean
            Return Me.IsNull(Me.tabletsex.tsexcmbdColumn)
        End Function
        
        Public Sub SettsexcmbdNull()
            Me(Me.tabletsex.tsexcmbdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tsexRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tsexRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tsexRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tsexRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
