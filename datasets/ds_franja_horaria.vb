'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ds_franja_horaria
    Inherits DataSet
    
    Private tablefranja_horaria As franja_horariaDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("franja_horaria")) Is Nothing) Then
                Me.Tables.Add(New franja_horariaDataTable(ds.Tables("franja_horaria")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property franja_horaria As franja_horariaDataTable
        Get
            Return Me.tablefranja_horaria
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ds_franja_horaria = CType(MyBase.Clone,ds_franja_horaria)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("franja_horaria")) Is Nothing) Then
            Me.Tables.Add(New franja_horariaDataTable(ds.Tables("franja_horaria")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablefranja_horaria = CType(Me.Tables("franja_horaria"),franja_horariaDataTable)
        If (Not (Me.tablefranja_horaria) Is Nothing) Then
            Me.tablefranja_horaria.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ds_franja_horaria"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ds_franja_horaria.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablefranja_horaria = New franja_horariaDataTable
        Me.Tables.Add(Me.tablefranja_horaria)
    End Sub
    
    Private Function ShouldSerializefranja_horaria() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub franja_horariaRowChangeEventHandler(ByVal sender As Object, ByVal e As franja_horariaRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class franja_horariaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnhora_inicio As DataColumn
        
        Private columnminuto_inicio As DataColumn
        
        Private columnhora_fin As DataColumn
        
        Private columnminuto_fin As DataColumn
        
        Private columnbtimetabgran As DataColumn
        
        Friend Sub New()
            MyBase.New("franja_horaria")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property hora_inicioColumn As DataColumn
            Get
                Return Me.columnhora_inicio
            End Get
        End Property
        
        Friend ReadOnly Property minuto_inicioColumn As DataColumn
            Get
                Return Me.columnminuto_inicio
            End Get
        End Property
        
        Friend ReadOnly Property hora_finColumn As DataColumn
            Get
                Return Me.columnhora_fin
            End Get
        End Property
        
        Friend ReadOnly Property minuto_finColumn As DataColumn
            Get
                Return Me.columnminuto_fin
            End Get
        End Property
        
        Friend ReadOnly Property btimetabgranColumn As DataColumn
            Get
                Return Me.columnbtimetabgran
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As franja_horariaRow
            Get
                Return CType(Me.Rows(index),franja_horariaRow)
            End Get
        End Property
        
        Public Event franja_horariaRowChanged As franja_horariaRowChangeEventHandler
        
        Public Event franja_horariaRowChanging As franja_horariaRowChangeEventHandler
        
        Public Event franja_horariaRowDeleted As franja_horariaRowChangeEventHandler
        
        Public Event franja_horariaRowDeleting As franja_horariaRowChangeEventHandler
        
        Public Overloads Sub Addfranja_horariaRow(ByVal row As franja_horariaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addfranja_horariaRow(ByVal hora_inicio As Integer, ByVal minuto_inicio As Integer, ByVal hora_fin As Integer, ByVal minuto_fin As Integer, ByVal btimetabgran As Integer) As franja_horariaRow
            Dim rowfranja_horariaRow As franja_horariaRow = CType(Me.NewRow,franja_horariaRow)
            rowfranja_horariaRow.ItemArray = New Object() {hora_inicio, minuto_inicio, hora_fin, minuto_fin, btimetabgran}
            Me.Rows.Add(rowfranja_horariaRow)
            Return rowfranja_horariaRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As franja_horariaDataTable = CType(MyBase.Clone,franja_horariaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New franja_horariaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnhora_inicio = Me.Columns("hora_inicio")
            Me.columnminuto_inicio = Me.Columns("minuto_inicio")
            Me.columnhora_fin = Me.Columns("hora_fin")
            Me.columnminuto_fin = Me.Columns("minuto_fin")
            Me.columnbtimetabgran = Me.Columns("btimetabgran")
        End Sub
        
        Private Sub InitClass()
            Me.columnhora_inicio = New DataColumn("hora_inicio", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhora_inicio)
            Me.columnminuto_inicio = New DataColumn("minuto_inicio", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnminuto_inicio)
            Me.columnhora_fin = New DataColumn("hora_fin", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhora_fin)
            Me.columnminuto_fin = New DataColumn("minuto_fin", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnminuto_fin)
            Me.columnbtimetabgran = New DataColumn("btimetabgran", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbtimetabgran)
        End Sub
        
        Public Function Newfranja_horariaRow() As franja_horariaRow
            Return CType(Me.NewRow,franja_horariaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New franja_horariaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(franja_horariaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.franja_horariaRowChangedEvent) Is Nothing) Then
                RaiseEvent franja_horariaRowChanged(Me, New franja_horariaRowChangeEvent(CType(e.Row,franja_horariaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.franja_horariaRowChangingEvent) Is Nothing) Then
                RaiseEvent franja_horariaRowChanging(Me, New franja_horariaRowChangeEvent(CType(e.Row,franja_horariaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.franja_horariaRowDeletedEvent) Is Nothing) Then
                RaiseEvent franja_horariaRowDeleted(Me, New franja_horariaRowChangeEvent(CType(e.Row,franja_horariaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.franja_horariaRowDeletingEvent) Is Nothing) Then
                RaiseEvent franja_horariaRowDeleting(Me, New franja_horariaRowChangeEvent(CType(e.Row,franja_horariaRow), e.Action))
            End If
        End Sub
        
        Public Sub Removefranja_horariaRow(ByVal row As franja_horariaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class franja_horariaRow
        Inherits DataRow
        
        Private tablefranja_horaria As franja_horariaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablefranja_horaria = CType(Me.Table,franja_horariaDataTable)
        End Sub
        
        Public Property hora_inicio As Integer
            Get
                Try 
                    Return CType(Me(Me.tablefranja_horaria.hora_inicioColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefranja_horaria.hora_inicioColumn) = value
            End Set
        End Property
        
        Public Property minuto_inicio As Integer
            Get
                Try 
                    Return CType(Me(Me.tablefranja_horaria.minuto_inicioColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefranja_horaria.minuto_inicioColumn) = value
            End Set
        End Property
        
        Public Property hora_fin As Integer
            Get
                Try 
                    Return CType(Me(Me.tablefranja_horaria.hora_finColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefranja_horaria.hora_finColumn) = value
            End Set
        End Property
        
        Public Property minuto_fin As Integer
            Get
                Try 
                    Return CType(Me(Me.tablefranja_horaria.minuto_finColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefranja_horaria.minuto_finColumn) = value
            End Set
        End Property
        
        Public Property btimetabgran As Integer
            Get
                Try 
                    Return CType(Me(Me.tablefranja_horaria.btimetabgranColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefranja_horaria.btimetabgranColumn) = value
            End Set
        End Property
        
        Public Function Ishora_inicioNull() As Boolean
            Return Me.IsNull(Me.tablefranja_horaria.hora_inicioColumn)
        End Function
        
        Public Sub Sethora_inicioNull()
            Me(Me.tablefranja_horaria.hora_inicioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isminuto_inicioNull() As Boolean
            Return Me.IsNull(Me.tablefranja_horaria.minuto_inicioColumn)
        End Function
        
        Public Sub Setminuto_inicioNull()
            Me(Me.tablefranja_horaria.minuto_inicioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ishora_finNull() As Boolean
            Return Me.IsNull(Me.tablefranja_horaria.hora_finColumn)
        End Function
        
        Public Sub Sethora_finNull()
            Me(Me.tablefranja_horaria.hora_finColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isminuto_finNull() As Boolean
            Return Me.IsNull(Me.tablefranja_horaria.minuto_finColumn)
        End Function
        
        Public Sub Setminuto_finNull()
            Me(Me.tablefranja_horaria.minuto_finColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbtimetabgranNull() As Boolean
            Return Me.IsNull(Me.tablefranja_horaria.btimetabgranColumn)
        End Function
        
        Public Sub SetbtimetabgranNull()
            Me(Me.tablefranja_horaria.btimetabgranColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class franja_horariaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As franja_horariaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As franja_horariaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As franja_horariaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
