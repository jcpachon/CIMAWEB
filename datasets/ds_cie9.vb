'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2407
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ds_cie9
    Inherits DataSet
    
    Private tablecie9 As cie9DataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("cie9")) Is Nothing) Then
                Me.Tables.Add(New cie9DataTable(ds.Tables("cie9")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cie9 As cie9DataTable
        Get
            Return Me.tablecie9
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ds_cie9 = CType(MyBase.Clone,ds_cie9)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("cie9")) Is Nothing) Then
            Me.Tables.Add(New cie9DataTable(ds.Tables("cie9")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablecie9 = CType(Me.Tables("cie9"),cie9DataTable)
        If (Not (Me.tablecie9) Is Nothing) Then
            Me.tablecie9.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ds_cie9"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ds_cie9.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablecie9 = New cie9DataTable
        Me.Tables.Add(Me.tablecie9)
    End Sub
    
    Private Function ShouldSerializecie9() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub cie9RowChangeEventHandler(ByVal sender As Object, ByVal e As cie9RowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cie9DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncie9_key As DataColumn
        
        Private columncaco_key As DataColumn
        
        Private columnvcodvers As DataColumn
        
        Private columncie9code As DataColumn
        
        Private columncie9desc As DataColumn
        
        Private columncie9type As DataColumn
        
        Private columncie9vers As DataColumn
        
        Private columncie9upda As DataColumn
        
        Private columncie9numetimsrequ As DataColumn
        
        Private columncie9numetimsepis As DataColumn
        
        Private columncie9main As DataColumn
        
        Private columncie9epid As DataColumn
        
        Friend Sub New()
            MyBase.New("cie9")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cie9_keyColumn As DataColumn
            Get
                Return Me.columncie9_key
            End Get
        End Property
        
        Friend ReadOnly Property caco_keyColumn As DataColumn
            Get
                Return Me.columncaco_key
            End Get
        End Property
        
        Friend ReadOnly Property vcodversColumn As DataColumn
            Get
                Return Me.columnvcodvers
            End Get
        End Property
        
        Friend ReadOnly Property cie9codeColumn As DataColumn
            Get
                Return Me.columncie9code
            End Get
        End Property
        
        Friend ReadOnly Property cie9descColumn As DataColumn
            Get
                Return Me.columncie9desc
            End Get
        End Property
        
        Friend ReadOnly Property cie9typeColumn As DataColumn
            Get
                Return Me.columncie9type
            End Get
        End Property
        
        Friend ReadOnly Property cie9versColumn As DataColumn
            Get
                Return Me.columncie9vers
            End Get
        End Property
        
        Friend ReadOnly Property cie9updaColumn As DataColumn
            Get
                Return Me.columncie9upda
            End Get
        End Property
        
        Friend ReadOnly Property cie9numetimsrequColumn As DataColumn
            Get
                Return Me.columncie9numetimsrequ
            End Get
        End Property
        
        Friend ReadOnly Property cie9numetimsepisColumn As DataColumn
            Get
                Return Me.columncie9numetimsepis
            End Get
        End Property
        
        Friend ReadOnly Property cie9mainColumn As DataColumn
            Get
                Return Me.columncie9main
            End Get
        End Property
        
        Friend ReadOnly Property cie9epidColumn As DataColumn
            Get
                Return Me.columncie9epid
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As cie9Row
            Get
                Return CType(Me.Rows(index),cie9Row)
            End Get
        End Property
        
        Public Event cie9RowChanged As cie9RowChangeEventHandler
        
        Public Event cie9RowChanging As cie9RowChangeEventHandler
        
        Public Event cie9RowDeleted As cie9RowChangeEventHandler
        
        Public Event cie9RowDeleting As cie9RowChangeEventHandler
        
        Public Overloads Sub Addcie9Row(ByVal row As cie9Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addcie9Row(ByVal cie9_key As Integer, ByVal caco_key As Integer, ByVal vcodvers As String, ByVal cie9code As String, ByVal cie9desc As String, ByVal cie9type As String, ByVal cie9vers As String, ByVal cie9upda As String, ByVal cie9numetimsrequ As Integer, ByVal cie9numetimsepis As Integer, ByVal cie9main As String, ByVal cie9epid As String) As cie9Row
            Dim rowcie9Row As cie9Row = CType(Me.NewRow,cie9Row)
            rowcie9Row.ItemArray = New Object() {cie9_key, caco_key, vcodvers, cie9code, cie9desc, cie9type, cie9vers, cie9upda, cie9numetimsrequ, cie9numetimsepis, cie9main, cie9epid}
            Me.Rows.Add(rowcie9Row)
            Return rowcie9Row
        End Function
        
        Public Function FindBycie9_key(ByVal cie9_key As Integer) As cie9Row
            Return CType(Me.Rows.Find(New Object() {cie9_key}),cie9Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As cie9DataTable = CType(MyBase.Clone,cie9DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New cie9DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncie9_key = Me.Columns("cie9_key")
            Me.columncaco_key = Me.Columns("caco_key")
            Me.columnvcodvers = Me.Columns("vcodvers")
            Me.columncie9code = Me.Columns("cie9code")
            Me.columncie9desc = Me.Columns("cie9desc")
            Me.columncie9type = Me.Columns("cie9type")
            Me.columncie9vers = Me.Columns("cie9vers")
            Me.columncie9upda = Me.Columns("cie9upda")
            Me.columncie9numetimsrequ = Me.Columns("cie9numetimsrequ")
            Me.columncie9numetimsepis = Me.Columns("cie9numetimsepis")
            Me.columncie9main = Me.Columns("cie9main")
            Me.columncie9epid = Me.Columns("cie9epid")
        End Sub
        
        Private Sub InitClass()
            Me.columncie9_key = New DataColumn("cie9_key", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncie9_key)
            Me.columncaco_key = New DataColumn("caco_key", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncaco_key)
            Me.columnvcodvers = New DataColumn("vcodvers", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvcodvers)
            Me.columncie9code = New DataColumn("cie9code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncie9code)
            Me.columncie9desc = New DataColumn("cie9desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncie9desc)
            Me.columncie9type = New DataColumn("cie9type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncie9type)
            Me.columncie9vers = New DataColumn("cie9vers", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncie9vers)
            Me.columncie9upda = New DataColumn("cie9upda", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncie9upda)
            Me.columncie9numetimsrequ = New DataColumn("cie9numetimsrequ", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncie9numetimsrequ)
            Me.columncie9numetimsepis = New DataColumn("cie9numetimsepis", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncie9numetimsepis)
            Me.columncie9main = New DataColumn("cie9main", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncie9main)
            Me.columncie9epid = New DataColumn("cie9epid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncie9epid)
            Me.Constraints.Add(New UniqueConstraint("ds_cie9Key1", New DataColumn() {Me.columncie9_key}, true))
            Me.columncie9_key.AllowDBNull = false
            Me.columncie9_key.Unique = true
            Me.columncaco_key.AllowDBNull = false
            Me.columnvcodvers.AllowDBNull = false
            Me.columncie9code.AllowDBNull = false
            Me.columncie9desc.AllowDBNull = false
            Me.columncie9upda.AllowDBNull = false
            Me.columncie9main.AllowDBNull = false
        End Sub
        
        Public Function Newcie9Row() As cie9Row
            Return CType(Me.NewRow,cie9Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New cie9Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(cie9Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cie9RowChangedEvent) Is Nothing) Then
                RaiseEvent cie9RowChanged(Me, New cie9RowChangeEvent(CType(e.Row,cie9Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cie9RowChangingEvent) Is Nothing) Then
                RaiseEvent cie9RowChanging(Me, New cie9RowChangeEvent(CType(e.Row,cie9Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cie9RowDeletedEvent) Is Nothing) Then
                RaiseEvent cie9RowDeleted(Me, New cie9RowChangeEvent(CType(e.Row,cie9Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cie9RowDeletingEvent) Is Nothing) Then
                RaiseEvent cie9RowDeleting(Me, New cie9RowChangeEvent(CType(e.Row,cie9Row), e.Action))
            End If
        End Sub
        
        Public Sub Removecie9Row(ByVal row As cie9Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cie9Row
        Inherits DataRow
        
        Private tablecie9 As cie9DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecie9 = CType(Me.Table,cie9DataTable)
        End Sub
        
        Public Property cie9_key As Integer
            Get
                Return CType(Me(Me.tablecie9.cie9_keyColumn),Integer)
            End Get
            Set
                Me(Me.tablecie9.cie9_keyColumn) = value
            End Set
        End Property
        
        Public Property caco_key As Integer
            Get
                Return CType(Me(Me.tablecie9.caco_keyColumn),Integer)
            End Get
            Set
                Me(Me.tablecie9.caco_keyColumn) = value
            End Set
        End Property
        
        Public Property vcodvers As String
            Get
                Return CType(Me(Me.tablecie9.vcodversColumn),String)
            End Get
            Set
                Me(Me.tablecie9.vcodversColumn) = value
            End Set
        End Property
        
        Public Property cie9code As String
            Get
                Return CType(Me(Me.tablecie9.cie9codeColumn),String)
            End Get
            Set
                Me(Me.tablecie9.cie9codeColumn) = value
            End Set
        End Property
        
        Public Property cie9desc As String
            Get
                Return CType(Me(Me.tablecie9.cie9descColumn),String)
            End Get
            Set
                Me(Me.tablecie9.cie9descColumn) = value
            End Set
        End Property
        
        Public Property cie9type As String
            Get
                Try 
                    Return CType(Me(Me.tablecie9.cie9typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecie9.cie9typeColumn) = value
            End Set
        End Property
        
        Public Property cie9vers As String
            Get
                Try 
                    Return CType(Me(Me.tablecie9.cie9versColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecie9.cie9versColumn) = value
            End Set
        End Property
        
        Public Property cie9upda As String
            Get
                Return CType(Me(Me.tablecie9.cie9updaColumn),String)
            End Get
            Set
                Me(Me.tablecie9.cie9updaColumn) = value
            End Set
        End Property
        
        Public Property cie9numetimsrequ As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecie9.cie9numetimsrequColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecie9.cie9numetimsrequColumn) = value
            End Set
        End Property
        
        Public Property cie9numetimsepis As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecie9.cie9numetimsepisColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecie9.cie9numetimsepisColumn) = value
            End Set
        End Property
        
        Public Property cie9main As String
            Get
                Return CType(Me(Me.tablecie9.cie9mainColumn),String)
            End Get
            Set
                Me(Me.tablecie9.cie9mainColumn) = value
            End Set
        End Property
        
        Public Property cie9epid As String
            Get
                Try 
                    Return CType(Me(Me.tablecie9.cie9epidColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecie9.cie9epidColumn) = value
            End Set
        End Property
        
        Public Function Iscie9typeNull() As Boolean
            Return Me.IsNull(Me.tablecie9.cie9typeColumn)
        End Function
        
        Public Sub Setcie9typeNull()
            Me(Me.tablecie9.cie9typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscie9versNull() As Boolean
            Return Me.IsNull(Me.tablecie9.cie9versColumn)
        End Function
        
        Public Sub Setcie9versNull()
            Me(Me.tablecie9.cie9versColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscie9numetimsrequNull() As Boolean
            Return Me.IsNull(Me.tablecie9.cie9numetimsrequColumn)
        End Function
        
        Public Sub Setcie9numetimsrequNull()
            Me(Me.tablecie9.cie9numetimsrequColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscie9numetimsepisNull() As Boolean
            Return Me.IsNull(Me.tablecie9.cie9numetimsepisColumn)
        End Function
        
        Public Sub Setcie9numetimsepisNull()
            Me(Me.tablecie9.cie9numetimsepisColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscie9epidNull() As Boolean
            Return Me.IsNull(Me.tablecie9.cie9epidColumn)
        End Function
        
        Public Sub Setcie9epidNull()
            Me(Me.tablecie9.cie9epidColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cie9RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As cie9Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As cie9Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As cie9Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
