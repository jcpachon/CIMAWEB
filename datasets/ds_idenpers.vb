'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ds_idenpers
    Inherits DataSet
    
    Private tableidenpers As idenpersDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("idenpers")) Is Nothing) Then
                Me.Tables.Add(New idenpersDataTable(ds.Tables("idenpers")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property idenpers As idenpersDataTable
        Get
            Return Me.tableidenpers
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ds_idenpers = CType(MyBase.Clone,ds_idenpers)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("idenpers")) Is Nothing) Then
            Me.Tables.Add(New idenpersDataTable(ds.Tables("idenpers")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableidenpers = CType(Me.Tables("idenpers"),idenpersDataTable)
        If (Not (Me.tableidenpers) Is Nothing) Then
            Me.tableidenpers.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ds_idenpers"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ds_idenpers.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableidenpers = New idenpersDataTable
        Me.Tables.Add(Me.tableidenpers)
    End Sub
    
    Private Function ShouldSerializeidenpers() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub idenpersRowChangeEventHandler(ByVal sender As Object, ByVal e As idenpersRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class idenpersDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnidenperscode As DataColumn
        
        Private columncodetmplcode As DataColumn
        
        Private columnidenpersdesc As DataColumn
        
        Private columnidenpersaffectto As DataColumn
        
        Private columnidenpersupda As DataColumn
        
        Private columnidenpersacti As DataColumn
        
        Private columnidenpersorde As DataColumn
        
        Friend Sub New()
            MyBase.New("idenpers")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property idenperscodeColumn As DataColumn
            Get
                Return Me.columnidenperscode
            End Get
        End Property
        
        Friend ReadOnly Property codetmplcodeColumn As DataColumn
            Get
                Return Me.columncodetmplcode
            End Get
        End Property
        
        Friend ReadOnly Property idenpersdescColumn As DataColumn
            Get
                Return Me.columnidenpersdesc
            End Get
        End Property
        
        Friend ReadOnly Property idenpersaffecttoColumn As DataColumn
            Get
                Return Me.columnidenpersaffectto
            End Get
        End Property
        
        Friend ReadOnly Property idenpersupdaColumn As DataColumn
            Get
                Return Me.columnidenpersupda
            End Get
        End Property
        
        Friend ReadOnly Property idenpersactiColumn As DataColumn
            Get
                Return Me.columnidenpersacti
            End Get
        End Property
        
        Friend ReadOnly Property idenpersordeColumn As DataColumn
            Get
                Return Me.columnidenpersorde
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As idenpersRow
            Get
                Return CType(Me.Rows(index),idenpersRow)
            End Get
        End Property
        
        Public Event idenpersRowChanged As idenpersRowChangeEventHandler
        
        Public Event idenpersRowChanging As idenpersRowChangeEventHandler
        
        Public Event idenpersRowDeleted As idenpersRowChangeEventHandler
        
        Public Event idenpersRowDeleting As idenpersRowChangeEventHandler
        
        Public Overloads Sub AddidenpersRow(ByVal row As idenpersRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddidenpersRow(ByVal idenperscode As String, ByVal codetmplcode As String, ByVal idenpersdesc As String, ByVal idenpersaffectto As String, ByVal idenpersupda As String, ByVal idenpersacti As String, ByVal idenpersorde As Short) As idenpersRow
            Dim rowidenpersRow As idenpersRow = CType(Me.NewRow,idenpersRow)
            rowidenpersRow.ItemArray = New Object() {idenperscode, codetmplcode, idenpersdesc, idenpersaffectto, idenpersupda, idenpersacti, idenpersorde}
            Me.Rows.Add(rowidenpersRow)
            Return rowidenpersRow
        End Function
        
        Public Function FindByidenperscode(ByVal idenperscode As String) As idenpersRow
            Return CType(Me.Rows.Find(New Object() {idenperscode}),idenpersRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As idenpersDataTable = CType(MyBase.Clone,idenpersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New idenpersDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnidenperscode = Me.Columns("idenperscode")
            Me.columncodetmplcode = Me.Columns("codetmplcode")
            Me.columnidenpersdesc = Me.Columns("idenpersdesc")
            Me.columnidenpersaffectto = Me.Columns("idenpersaffectto")
            Me.columnidenpersupda = Me.Columns("idenpersupda")
            Me.columnidenpersacti = Me.Columns("idenpersacti")
            Me.columnidenpersorde = Me.Columns("idenpersorde")
        End Sub
        
        Private Sub InitClass()
            Me.columnidenperscode = New DataColumn("idenperscode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnidenperscode)
            Me.columncodetmplcode = New DataColumn("codetmplcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncodetmplcode)
            Me.columnidenpersdesc = New DataColumn("idenpersdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnidenpersdesc)
            Me.columnidenpersaffectto = New DataColumn("idenpersaffectto", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnidenpersaffectto)
            Me.columnidenpersupda = New DataColumn("idenpersupda", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnidenpersupda)
            Me.columnidenpersacti = New DataColumn("idenpersacti", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnidenpersacti)
            Me.columnidenpersorde = New DataColumn("idenpersorde", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnidenpersorde)
            Me.Constraints.Add(New UniqueConstraint("ds_idenpersKey1", New DataColumn() {Me.columnidenperscode}, true))
            Me.columnidenperscode.AllowDBNull = false
            Me.columnidenperscode.Unique = true
            Me.columnidenpersaffectto.AllowDBNull = false
            Me.columnidenpersupda.AllowDBNull = false
            Me.columnidenpersacti.AllowDBNull = false
            Me.columnidenpersorde.AllowDBNull = false
        End Sub
        
        Public Function NewidenpersRow() As idenpersRow
            Return CType(Me.NewRow,idenpersRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New idenpersRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(idenpersRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.idenpersRowChangedEvent) Is Nothing) Then
                RaiseEvent idenpersRowChanged(Me, New idenpersRowChangeEvent(CType(e.Row,idenpersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.idenpersRowChangingEvent) Is Nothing) Then
                RaiseEvent idenpersRowChanging(Me, New idenpersRowChangeEvent(CType(e.Row,idenpersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.idenpersRowDeletedEvent) Is Nothing) Then
                RaiseEvent idenpersRowDeleted(Me, New idenpersRowChangeEvent(CType(e.Row,idenpersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.idenpersRowDeletingEvent) Is Nothing) Then
                RaiseEvent idenpersRowDeleting(Me, New idenpersRowChangeEvent(CType(e.Row,idenpersRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveidenpersRow(ByVal row As idenpersRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class idenpersRow
        Inherits DataRow
        
        Private tableidenpers As idenpersDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableidenpers = CType(Me.Table,idenpersDataTable)
        End Sub
        
        Public Property idenperscode As String
            Get
                Return CType(Me(Me.tableidenpers.idenperscodeColumn),String)
            End Get
            Set
                Me(Me.tableidenpers.idenperscodeColumn) = value
            End Set
        End Property
        
        Public Property codetmplcode As String
            Get
                Try 
                    Return CType(Me(Me.tableidenpers.codetmplcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableidenpers.codetmplcodeColumn) = value
            End Set
        End Property
        
        Public Property idenpersdesc As String
            Get
                Try 
                    Return CType(Me(Me.tableidenpers.idenpersdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableidenpers.idenpersdescColumn) = value
            End Set
        End Property
        
        Public Property idenpersaffectto As String
            Get
                Return CType(Me(Me.tableidenpers.idenpersaffecttoColumn),String)
            End Get
            Set
                Me(Me.tableidenpers.idenpersaffecttoColumn) = value
            End Set
        End Property
        
        Public Property idenpersupda As String
            Get
                Return CType(Me(Me.tableidenpers.idenpersupdaColumn),String)
            End Get
            Set
                Me(Me.tableidenpers.idenpersupdaColumn) = value
            End Set
        End Property
        
        Public Property idenpersacti As String
            Get
                Return CType(Me(Me.tableidenpers.idenpersactiColumn),String)
            End Get
            Set
                Me(Me.tableidenpers.idenpersactiColumn) = value
            End Set
        End Property
        
        Public Property idenpersorde As Short
            Get
                Return CType(Me(Me.tableidenpers.idenpersordeColumn),Short)
            End Get
            Set
                Me(Me.tableidenpers.idenpersordeColumn) = value
            End Set
        End Property
        
        Public Function IscodetmplcodeNull() As Boolean
            Return Me.IsNull(Me.tableidenpers.codetmplcodeColumn)
        End Function
        
        Public Sub SetcodetmplcodeNull()
            Me(Me.tableidenpers.codetmplcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsidenpersdescNull() As Boolean
            Return Me.IsNull(Me.tableidenpers.idenpersdescColumn)
        End Function
        
        Public Sub SetidenpersdescNull()
            Me(Me.tableidenpers.idenpersdescColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class idenpersRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As idenpersRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As idenpersRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As idenpersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
