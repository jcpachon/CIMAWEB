'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2300
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ds_agen_tabla
    Inherits DataSet
    
    Private tableagen As agenDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("agen")) Is Nothing) Then
                Me.Tables.Add(New agenDataTable(ds.Tables("agen")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property agen As agenDataTable
        Get
            Return Me.tableagen
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ds_agen_tabla = CType(MyBase.Clone,ds_agen_tabla)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("agen")) Is Nothing) Then
            Me.Tables.Add(New agenDataTable(ds.Tables("agen")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableagen = CType(Me.Tables("agen"),agenDataTable)
        If (Not (Me.tableagen) Is Nothing) Then
            Me.tableagen.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ds_agen_tabla"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ds_agen_tabla.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableagen = New agenDataTable
        Me.Tables.Add(Me.tableagen)
    End Sub
    
    Private Function ShouldSerializeagen() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub agenRowChangeEventHandler(ByVal sender As Object, ByVal e As agenRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class agenDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnagencode As DataColumn
        
        Private columnspdi_key As DataColumn
        
        Private columnagenname As DataColumn
        
        Private columnagenacti As DataColumn
        
        Private columncaltcode As DataColumn
        
        Private columnagentypecode As DataColumn
        
        Private columncent_key As DataColumn
        
        Private columnagenautodoss As DataColumn
        
        Private columnagenflagpacs As DataColumn
        
        Private columnagenpriv As DataColumn
        
        Private columnagenwarn As DataColumn
        
        Private columnprod_key As DataColumn
        
        Private columnmsrepl_tran_version As DataColumn
        
        Private columnagenprpo As DataColumn
        
        Private columnagenslot As DataColumn
        
        Friend Sub New()
            MyBase.New("agen")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property agencodeColumn As DataColumn
            Get
                Return Me.columnagencode
            End Get
        End Property
        
        Friend ReadOnly Property spdi_keyColumn As DataColumn
            Get
                Return Me.columnspdi_key
            End Get
        End Property
        
        Friend ReadOnly Property agennameColumn As DataColumn
            Get
                Return Me.columnagenname
            End Get
        End Property
        
        Friend ReadOnly Property agenactiColumn As DataColumn
            Get
                Return Me.columnagenacti
            End Get
        End Property
        
        Friend ReadOnly Property caltcodeColumn As DataColumn
            Get
                Return Me.columncaltcode
            End Get
        End Property
        
        Friend ReadOnly Property agentypecodeColumn As DataColumn
            Get
                Return Me.columnagentypecode
            End Get
        End Property
        
        Friend ReadOnly Property cent_keyColumn As DataColumn
            Get
                Return Me.columncent_key
            End Get
        End Property
        
        Friend ReadOnly Property agenautodossColumn As DataColumn
            Get
                Return Me.columnagenautodoss
            End Get
        End Property
        
        Friend ReadOnly Property agenflagpacsColumn As DataColumn
            Get
                Return Me.columnagenflagpacs
            End Get
        End Property
        
        Friend ReadOnly Property agenprivColumn As DataColumn
            Get
                Return Me.columnagenpriv
            End Get
        End Property
        
        Friend ReadOnly Property agenwarnColumn As DataColumn
            Get
                Return Me.columnagenwarn
            End Get
        End Property
        
        Friend ReadOnly Property prod_keyColumn As DataColumn
            Get
                Return Me.columnprod_key
            End Get
        End Property
        
        Friend ReadOnly Property msrepl_tran_versionColumn As DataColumn
            Get
                Return Me.columnmsrepl_tran_version
            End Get
        End Property
        
        Friend ReadOnly Property agenprpoColumn As DataColumn
            Get
                Return Me.columnagenprpo
            End Get
        End Property
        
        Friend ReadOnly Property agenslotColumn As DataColumn
            Get
                Return Me.columnagenslot
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As agenRow
            Get
                Return CType(Me.Rows(index),agenRow)
            End Get
        End Property
        
        Public Event agenRowChanged As agenRowChangeEventHandler
        
        Public Event agenRowChanging As agenRowChangeEventHandler
        
        Public Event agenRowDeleted As agenRowChangeEventHandler
        
        Public Event agenRowDeleting As agenRowChangeEventHandler
        
        Public Overloads Sub AddagenRow(ByVal row As agenRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddagenRow(ByVal agencode As String, ByVal spdi_key As Integer, ByVal agenname As String, ByVal agenacti As String, ByVal caltcode As String, ByVal agentypecode As String, ByVal cent_key As Integer, ByVal agenautodoss As String, ByVal agenflagpacs As String, ByVal agenpriv As String, ByVal agenwarn As String, ByVal prod_key As Integer, ByVal msrepl_tran_version As System.Guid, ByVal agenprpo As String, ByVal agenslot As String) As agenRow
            Dim rowagenRow As agenRow = CType(Me.NewRow,agenRow)
            rowagenRow.ItemArray = New Object() {agencode, spdi_key, agenname, agenacti, caltcode, agentypecode, cent_key, agenautodoss, agenflagpacs, agenpriv, agenwarn, prod_key, msrepl_tran_version, agenprpo, agenslot}
            Me.Rows.Add(rowagenRow)
            Return rowagenRow
        End Function
        
        Public Function FindByagencode(ByVal agencode As String) As agenRow
            Return CType(Me.Rows.Find(New Object() {agencode}),agenRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As agenDataTable = CType(MyBase.Clone,agenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New agenDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnagencode = Me.Columns("agencode")
            Me.columnspdi_key = Me.Columns("spdi_key")
            Me.columnagenname = Me.Columns("agenname")
            Me.columnagenacti = Me.Columns("agenacti")
            Me.columncaltcode = Me.Columns("caltcode")
            Me.columnagentypecode = Me.Columns("agentypecode")
            Me.columncent_key = Me.Columns("cent_key")
            Me.columnagenautodoss = Me.Columns("agenautodoss")
            Me.columnagenflagpacs = Me.Columns("agenflagpacs")
            Me.columnagenpriv = Me.Columns("agenpriv")
            Me.columnagenwarn = Me.Columns("agenwarn")
            Me.columnprod_key = Me.Columns("prod_key")
            Me.columnmsrepl_tran_version = Me.Columns("msrepl_tran_version")
            Me.columnagenprpo = Me.Columns("agenprpo")
            Me.columnagenslot = Me.Columns("agenslot")
        End Sub
        
        Private Sub InitClass()
            Me.columnagencode = New DataColumn("agencode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnagencode)
            Me.columnspdi_key = New DataColumn("spdi_key", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnspdi_key)
            Me.columnagenname = New DataColumn("agenname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnagenname)
            Me.columnagenacti = New DataColumn("agenacti", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnagenacti)
            Me.columncaltcode = New DataColumn("caltcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncaltcode)
            Me.columnagentypecode = New DataColumn("agentypecode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnagentypecode)
            Me.columncent_key = New DataColumn("cent_key", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncent_key)
            Me.columnagenautodoss = New DataColumn("agenautodoss", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnagenautodoss)
            Me.columnagenflagpacs = New DataColumn("agenflagpacs", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnagenflagpacs)
            Me.columnagenpriv = New DataColumn("agenpriv", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnagenpriv)
            Me.columnagenwarn = New DataColumn("agenwarn", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnagenwarn)
            Me.columnprod_key = New DataColumn("prod_key", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprod_key)
            Me.columnmsrepl_tran_version = New DataColumn("msrepl_tran_version", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmsrepl_tran_version)
            Me.columnagenprpo = New DataColumn("agenprpo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnagenprpo)
            Me.columnagenslot = New DataColumn("agenslot", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnagenslot)
            Me.Constraints.Add(New UniqueConstraint("ds_agen_tablaKey1", New DataColumn() {Me.columnagencode}, true))
            Me.columnagencode.AllowDBNull = false
            Me.columnagencode.Unique = true
            Me.columnspdi_key.AllowDBNull = false
            Me.columnagenname.AllowDBNull = false
            Me.columnagenacti.AllowDBNull = false
            Me.columncaltcode.AllowDBNull = false
            Me.columnagentypecode.AllowDBNull = false
            Me.columncent_key.AllowDBNull = false
            Me.columnagenautodoss.AllowDBNull = false
            Me.columnagenflagpacs.AllowDBNull = false
            Me.columnagenpriv.AllowDBNull = false
            Me.columnmsrepl_tran_version.AllowDBNull = false
            Me.columnagenprpo.AllowDBNull = false
            Me.columnagenslot.AllowDBNull = false
        End Sub
        
        Public Function NewagenRow() As agenRow
            Return CType(Me.NewRow,agenRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New agenRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(agenRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.agenRowChangedEvent) Is Nothing) Then
                RaiseEvent agenRowChanged(Me, New agenRowChangeEvent(CType(e.Row,agenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.agenRowChangingEvent) Is Nothing) Then
                RaiseEvent agenRowChanging(Me, New agenRowChangeEvent(CType(e.Row,agenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.agenRowDeletedEvent) Is Nothing) Then
                RaiseEvent agenRowDeleted(Me, New agenRowChangeEvent(CType(e.Row,agenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.agenRowDeletingEvent) Is Nothing) Then
                RaiseEvent agenRowDeleting(Me, New agenRowChangeEvent(CType(e.Row,agenRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveagenRow(ByVal row As agenRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class agenRow
        Inherits DataRow
        
        Private tableagen As agenDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableagen = CType(Me.Table,agenDataTable)
        End Sub
        
        Public Property agencode As String
            Get
                Return CType(Me(Me.tableagen.agencodeColumn),String)
            End Get
            Set
                Me(Me.tableagen.agencodeColumn) = value
            End Set
        End Property
        
        Public Property spdi_key As Integer
            Get
                Return CType(Me(Me.tableagen.spdi_keyColumn),Integer)
            End Get
            Set
                Me(Me.tableagen.spdi_keyColumn) = value
            End Set
        End Property
        
        Public Property agenname As String
            Get
                Return CType(Me(Me.tableagen.agennameColumn),String)
            End Get
            Set
                Me(Me.tableagen.agennameColumn) = value
            End Set
        End Property
        
        Public Property agenacti As String
            Get
                Return CType(Me(Me.tableagen.agenactiColumn),String)
            End Get
            Set
                Me(Me.tableagen.agenactiColumn) = value
            End Set
        End Property
        
        Public Property caltcode As String
            Get
                Return CType(Me(Me.tableagen.caltcodeColumn),String)
            End Get
            Set
                Me(Me.tableagen.caltcodeColumn) = value
            End Set
        End Property
        
        Public Property agentypecode As String
            Get
                Return CType(Me(Me.tableagen.agentypecodeColumn),String)
            End Get
            Set
                Me(Me.tableagen.agentypecodeColumn) = value
            End Set
        End Property
        
        Public Property cent_key As Integer
            Get
                Return CType(Me(Me.tableagen.cent_keyColumn),Integer)
            End Get
            Set
                Me(Me.tableagen.cent_keyColumn) = value
            End Set
        End Property
        
        Public Property agenautodoss As String
            Get
                Return CType(Me(Me.tableagen.agenautodossColumn),String)
            End Get
            Set
                Me(Me.tableagen.agenautodossColumn) = value
            End Set
        End Property
        
        Public Property agenflagpacs As String
            Get
                Return CType(Me(Me.tableagen.agenflagpacsColumn),String)
            End Get
            Set
                Me(Me.tableagen.agenflagpacsColumn) = value
            End Set
        End Property
        
        Public Property agenpriv As String
            Get
                Return CType(Me(Me.tableagen.agenprivColumn),String)
            End Get
            Set
                Me(Me.tableagen.agenprivColumn) = value
            End Set
        End Property
        
        Public Property agenwarn As String
            Get
                Try 
                    Return CType(Me(Me.tableagen.agenwarnColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableagen.agenwarnColumn) = value
            End Set
        End Property
        
        Public Property prod_key As Integer
            Get
                Try 
                    Return CType(Me(Me.tableagen.prod_keyColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableagen.prod_keyColumn) = value
            End Set
        End Property
        
        Public Property msrepl_tran_version As System.Guid
            Get
                Return CType(Me(Me.tableagen.msrepl_tran_versionColumn),System.Guid)
            End Get
            Set
                Me(Me.tableagen.msrepl_tran_versionColumn) = value
            End Set
        End Property
        
        Public Property agenprpo As String
            Get
                Return CType(Me(Me.tableagen.agenprpoColumn),String)
            End Get
            Set
                Me(Me.tableagen.agenprpoColumn) = value
            End Set
        End Property
        
        Public Property agenslot As String
            Get
                Return CType(Me(Me.tableagen.agenslotColumn),String)
            End Get
            Set
                Me(Me.tableagen.agenslotColumn) = value
            End Set
        End Property
        
        Public Function IsagenwarnNull() As Boolean
            Return Me.IsNull(Me.tableagen.agenwarnColumn)
        End Function
        
        Public Sub SetagenwarnNull()
            Me(Me.tableagen.agenwarnColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprod_keyNull() As Boolean
            Return Me.IsNull(Me.tableagen.prod_keyColumn)
        End Function
        
        Public Sub Setprod_keyNull()
            Me(Me.tableagen.prod_keyColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class agenRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As agenRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As agenRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As agenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
