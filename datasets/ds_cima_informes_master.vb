'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2300
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ds_cima_informes_master
    Inherits DataSet
    
    Private tablecima_informes_master As cima_informes_masterDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("cima_informes_master")) Is Nothing) Then
                Me.Tables.Add(New cima_informes_masterDataTable(ds.Tables("cima_informes_master")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cima_informes_master As cima_informes_masterDataTable
        Get
            Return Me.tablecima_informes_master
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ds_cima_informes_master = CType(MyBase.Clone,ds_cima_informes_master)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("cima_informes_master")) Is Nothing) Then
            Me.Tables.Add(New cima_informes_masterDataTable(ds.Tables("cima_informes_master")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablecima_informes_master = CType(Me.Tables("cima_informes_master"),cima_informes_masterDataTable)
        If (Not (Me.tablecima_informes_master) Is Nothing) Then
            Me.tablecima_informes_master.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ds_cima_informes_master"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ds_cima_informes_master.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablecima_informes_master = New cima_informes_masterDataTable
        Me.Tables.Add(Me.tablecima_informes_master)
    End Sub
    
    Private Function ShouldSerializecima_informes_master() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub cima_informes_masterRowChangeEventHandler(ByVal sender As Object, ByVal e As cima_informes_masterRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cima_informes_masterDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_informe As DataColumn
        
        Private columncabecera As DataColumn
        
        Private columnid_usuario As DataColumn
        
        Private columnfecha_creacion As DataColumn
        
        Private columncerrado As DataColumn
        
        Private columnepisodio As DataColumn
        
        Private columnmodificacion As DataColumn
        
        Private columnpdf As DataColumn
        
        Friend Sub New()
            MyBase.New("cima_informes_master")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_informeColumn As DataColumn
            Get
                Return Me.columnid_informe
            End Get
        End Property
        
        Friend ReadOnly Property cabeceraColumn As DataColumn
            Get
                Return Me.columncabecera
            End Get
        End Property
        
        Friend ReadOnly Property id_usuarioColumn As DataColumn
            Get
                Return Me.columnid_usuario
            End Get
        End Property
        
        Friend ReadOnly Property fecha_creacionColumn As DataColumn
            Get
                Return Me.columnfecha_creacion
            End Get
        End Property
        
        Friend ReadOnly Property cerradoColumn As DataColumn
            Get
                Return Me.columncerrado
            End Get
        End Property
        
        Friend ReadOnly Property episodioColumn As DataColumn
            Get
                Return Me.columnepisodio
            End Get
        End Property
        
        Friend ReadOnly Property modificacionColumn As DataColumn
            Get
                Return Me.columnmodificacion
            End Get
        End Property
        
        Friend ReadOnly Property pdfColumn As DataColumn
            Get
                Return Me.columnpdf
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As cima_informes_masterRow
            Get
                Return CType(Me.Rows(index),cima_informes_masterRow)
            End Get
        End Property
        
        Public Event cima_informes_masterRowChanged As cima_informes_masterRowChangeEventHandler
        
        Public Event cima_informes_masterRowChanging As cima_informes_masterRowChangeEventHandler
        
        Public Event cima_informes_masterRowDeleted As cima_informes_masterRowChangeEventHandler
        
        Public Event cima_informes_masterRowDeleting As cima_informes_masterRowChangeEventHandler
        
        Public Overloads Sub Addcima_informes_masterRow(ByVal row As cima_informes_masterRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addcima_informes_masterRow(ByVal cabecera As String, ByVal id_usuario As String, ByVal fecha_creacion As Date, ByVal cerrado As String, ByVal episodio As String, ByVal modificacion As String, ByVal pdf() As Byte) As cima_informes_masterRow
            Dim rowcima_informes_masterRow As cima_informes_masterRow = CType(Me.NewRow,cima_informes_masterRow)
            rowcima_informes_masterRow.ItemArray = New Object() {Nothing, cabecera, id_usuario, fecha_creacion, cerrado, episodio, modificacion, pdf}
            Me.Rows.Add(rowcima_informes_masterRow)
            Return rowcima_informes_masterRow
        End Function
        
        Public Function FindByid_informe(ByVal id_informe As Integer) As cima_informes_masterRow
            Return CType(Me.Rows.Find(New Object() {id_informe}),cima_informes_masterRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As cima_informes_masterDataTable = CType(MyBase.Clone,cima_informes_masterDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New cima_informes_masterDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_informe = Me.Columns("id_informe")
            Me.columncabecera = Me.Columns("cabecera")
            Me.columnid_usuario = Me.Columns("id_usuario")
            Me.columnfecha_creacion = Me.Columns("fecha_creacion")
            Me.columncerrado = Me.Columns("cerrado")
            Me.columnepisodio = Me.Columns("episodio")
            Me.columnmodificacion = Me.Columns("modificacion")
            Me.columnpdf = Me.Columns("pdf")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_informe = New DataColumn("id_informe", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_informe)
            Me.columncabecera = New DataColumn("cabecera", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncabecera)
            Me.columnid_usuario = New DataColumn("id_usuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_usuario)
            Me.columnfecha_creacion = New DataColumn("fecha_creacion", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfecha_creacion)
            Me.columncerrado = New DataColumn("cerrado", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncerrado)
            Me.columnepisodio = New DataColumn("episodio", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnepisodio)
            Me.columnmodificacion = New DataColumn("modificacion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmodificacion)
            Me.columnpdf = New DataColumn("pdf", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpdf)
            Me.Constraints.Add(New UniqueConstraint("ds_cima_informes_masterKey1", New DataColumn() {Me.columnid_informe}, true))
            Me.columnid_informe.AutoIncrement = true
            Me.columnid_informe.AllowDBNull = false
            Me.columnid_informe.ReadOnly = true
            Me.columnid_informe.Unique = true
        End Sub
        
        Public Function Newcima_informes_masterRow() As cima_informes_masterRow
            Return CType(Me.NewRow,cima_informes_masterRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New cima_informes_masterRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(cima_informes_masterRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cima_informes_masterRowChangedEvent) Is Nothing) Then
                RaiseEvent cima_informes_masterRowChanged(Me, New cima_informes_masterRowChangeEvent(CType(e.Row,cima_informes_masterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cima_informes_masterRowChangingEvent) Is Nothing) Then
                RaiseEvent cima_informes_masterRowChanging(Me, New cima_informes_masterRowChangeEvent(CType(e.Row,cima_informes_masterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cima_informes_masterRowDeletedEvent) Is Nothing) Then
                RaiseEvent cima_informes_masterRowDeleted(Me, New cima_informes_masterRowChangeEvent(CType(e.Row,cima_informes_masterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cima_informes_masterRowDeletingEvent) Is Nothing) Then
                RaiseEvent cima_informes_masterRowDeleting(Me, New cima_informes_masterRowChangeEvent(CType(e.Row,cima_informes_masterRow), e.Action))
            End If
        End Sub
        
        Public Sub Removecima_informes_masterRow(ByVal row As cima_informes_masterRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cima_informes_masterRow
        Inherits DataRow
        
        Private tablecima_informes_master As cima_informes_masterDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecima_informes_master = CType(Me.Table,cima_informes_masterDataTable)
        End Sub
        
        Public Property id_informe As Integer
            Get
                Return CType(Me(Me.tablecima_informes_master.id_informeColumn),Integer)
            End Get
            Set
                Me(Me.tablecima_informes_master.id_informeColumn) = value
            End Set
        End Property
        
        Public Property cabecera As String
            Get
                Try 
                    Return CType(Me(Me.tablecima_informes_master.cabeceraColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecima_informes_master.cabeceraColumn) = value
            End Set
        End Property
        
        Public Property id_usuario As String
            Get
                Try 
                    Return CType(Me(Me.tablecima_informes_master.id_usuarioColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecima_informes_master.id_usuarioColumn) = value
            End Set
        End Property
        
        Public Property fecha_creacion As Date
            Get
                Try 
                    Return CType(Me(Me.tablecima_informes_master.fecha_creacionColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecima_informes_master.fecha_creacionColumn) = value
            End Set
        End Property
        
        Public Property cerrado As String
            Get
                Try 
                    Return CType(Me(Me.tablecima_informes_master.cerradoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecima_informes_master.cerradoColumn) = value
            End Set
        End Property
        
        Public Property episodio As String
            Get
                Try 
                    Return CType(Me(Me.tablecima_informes_master.episodioColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecima_informes_master.episodioColumn) = value
            End Set
        End Property
        
        Public Property modificacion As String
            Get
                Try 
                    Return CType(Me(Me.tablecima_informes_master.modificacionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecima_informes_master.modificacionColumn) = value
            End Set
        End Property
        
        Public Property pdf As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablecima_informes_master.pdfColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecima_informes_master.pdfColumn) = value
            End Set
        End Property
        
        Public Function IscabeceraNull() As Boolean
            Return Me.IsNull(Me.tablecima_informes_master.cabeceraColumn)
        End Function
        
        Public Sub SetcabeceraNull()
            Me(Me.tablecima_informes_master.cabeceraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_usuarioNull() As Boolean
            Return Me.IsNull(Me.tablecima_informes_master.id_usuarioColumn)
        End Function
        
        Public Sub Setid_usuarioNull()
            Me(Me.tablecima_informes_master.id_usuarioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfecha_creacionNull() As Boolean
            Return Me.IsNull(Me.tablecima_informes_master.fecha_creacionColumn)
        End Function
        
        Public Sub Setfecha_creacionNull()
            Me(Me.tablecima_informes_master.fecha_creacionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscerradoNull() As Boolean
            Return Me.IsNull(Me.tablecima_informes_master.cerradoColumn)
        End Function
        
        Public Sub SetcerradoNull()
            Me(Me.tablecima_informes_master.cerradoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsepisodioNull() As Boolean
            Return Me.IsNull(Me.tablecima_informes_master.episodioColumn)
        End Function
        
        Public Sub SetepisodioNull()
            Me(Me.tablecima_informes_master.episodioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmodificacionNull() As Boolean
            Return Me.IsNull(Me.tablecima_informes_master.modificacionColumn)
        End Function
        
        Public Sub SetmodificacionNull()
            Me(Me.tablecima_informes_master.modificacionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspdfNull() As Boolean
            Return Me.IsNull(Me.tablecima_informes_master.pdfColumn)
        End Function
        
        Public Sub SetpdfNull()
            Me(Me.tablecima_informes_master.pdfColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cima_informes_masterRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As cima_informes_masterRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As cima_informes_masterRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As cima_informes_masterRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
