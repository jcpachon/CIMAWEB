'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2470
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ds_garante_hcis
    Inherits DataSet
    
    Private tablegarante_hcis As garante_hcisDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("garante_hcis")) Is Nothing) Then
                Me.Tables.Add(New garante_hcisDataTable(ds.Tables("garante_hcis")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property garante_hcis As garante_hcisDataTable
        Get
            Return Me.tablegarante_hcis
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ds_garante_hcis = CType(MyBase.Clone,ds_garante_hcis)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("garante_hcis")) Is Nothing) Then
            Me.Tables.Add(New garante_hcisDataTable(ds.Tables("garante_hcis")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablegarante_hcis = CType(Me.Tables("garante_hcis"),garante_hcisDataTable)
        If (Not (Me.tablegarante_hcis) Is Nothing) Then
            Me.tablegarante_hcis.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ds_garante_hcis"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ds_garante_hcis.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablegarante_hcis = New garante_hcisDataTable
        Me.Tables.Add(Me.tablegarante_hcis)
    End Sub
    
    Private Function ShouldSerializegarante_hcis() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub garante_hcisRowChangeEventHandler(ByVal sender As Object, ByVal e As garante_hcisRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class garante_hcisDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnhcis As DataColumn
        
        Private columnhcis_desc As DataColumn
        
        Friend Sub New()
            MyBase.New("garante_hcis")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property hcisColumn As DataColumn
            Get
                Return Me.columnhcis
            End Get
        End Property
        
        Friend ReadOnly Property hcis_descColumn As DataColumn
            Get
                Return Me.columnhcis_desc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As garante_hcisRow
            Get
                Return CType(Me.Rows(index),garante_hcisRow)
            End Get
        End Property
        
        Public Event garante_hcisRowChanged As garante_hcisRowChangeEventHandler
        
        Public Event garante_hcisRowChanging As garante_hcisRowChangeEventHandler
        
        Public Event garante_hcisRowDeleted As garante_hcisRowChangeEventHandler
        
        Public Event garante_hcisRowDeleting As garante_hcisRowChangeEventHandler
        
        Public Overloads Sub Addgarante_hcisRow(ByVal row As garante_hcisRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addgarante_hcisRow(ByVal hcis As String, ByVal hcis_desc As String) As garante_hcisRow
            Dim rowgarante_hcisRow As garante_hcisRow = CType(Me.NewRow,garante_hcisRow)
            rowgarante_hcisRow.ItemArray = New Object() {hcis, hcis_desc}
            Me.Rows.Add(rowgarante_hcisRow)
            Return rowgarante_hcisRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As garante_hcisDataTable = CType(MyBase.Clone,garante_hcisDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New garante_hcisDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnhcis = Me.Columns("hcis")
            Me.columnhcis_desc = Me.Columns("hcis_desc")
        End Sub
        
        Private Sub InitClass()
            Me.columnhcis = New DataColumn("hcis", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhcis)
            Me.columnhcis_desc = New DataColumn("hcis_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhcis_desc)
        End Sub
        
        Public Function Newgarante_hcisRow() As garante_hcisRow
            Return CType(Me.NewRow,garante_hcisRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New garante_hcisRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(garante_hcisRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.garante_hcisRowChangedEvent) Is Nothing) Then
                RaiseEvent garante_hcisRowChanged(Me, New garante_hcisRowChangeEvent(CType(e.Row,garante_hcisRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.garante_hcisRowChangingEvent) Is Nothing) Then
                RaiseEvent garante_hcisRowChanging(Me, New garante_hcisRowChangeEvent(CType(e.Row,garante_hcisRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.garante_hcisRowDeletedEvent) Is Nothing) Then
                RaiseEvent garante_hcisRowDeleted(Me, New garante_hcisRowChangeEvent(CType(e.Row,garante_hcisRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.garante_hcisRowDeletingEvent) Is Nothing) Then
                RaiseEvent garante_hcisRowDeleting(Me, New garante_hcisRowChangeEvent(CType(e.Row,garante_hcisRow), e.Action))
            End If
        End Sub
        
        Public Sub Removegarante_hcisRow(ByVal row As garante_hcisRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class garante_hcisRow
        Inherits DataRow
        
        Private tablegarante_hcis As garante_hcisDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablegarante_hcis = CType(Me.Table,garante_hcisDataTable)
        End Sub
        
        Public Property hcis As String
            Get
                Try 
                    Return CType(Me(Me.tablegarante_hcis.hcisColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegarante_hcis.hcisColumn) = value
            End Set
        End Property
        
        Public Property hcis_desc As String
            Get
                Try 
                    Return CType(Me(Me.tablegarante_hcis.hcis_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegarante_hcis.hcis_descColumn) = value
            End Set
        End Property
        
        Public Function IshcisNull() As Boolean
            Return Me.IsNull(Me.tablegarante_hcis.hcisColumn)
        End Function
        
        Public Sub SethcisNull()
            Me(Me.tablegarante_hcis.hcisColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ishcis_descNull() As Boolean
            Return Me.IsNull(Me.tablegarante_hcis.hcis_descColumn)
        End Function
        
        Public Sub Sethcis_descNull()
            Me(Me.tablegarante_hcis.hcis_descColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class garante_hcisRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As garante_hcisRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As garante_hcisRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As garante_hcisRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
