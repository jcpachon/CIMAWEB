'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2470
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ds_recuperarDatosCita
    Inherits DataSet
    
    Private tableSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA As SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITADataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA")) Is Nothing) Then
                Me.Tables.Add(New SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITADataTable(ds.Tables("SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA As SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITADataTable
        Get
            Return Me.tableSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ds_recuperarDatosCita = CType(MyBase.Clone,ds_recuperarDatosCita)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA")) Is Nothing) Then
            Me.Tables.Add(New SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITADataTable(ds.Tables("SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA = CType(Me.Tables("SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA"),SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITADataTable)
        If (Not (Me.tableSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA) Is Nothing) Then
            Me.tableSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ds_recuperarDatosCita"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ds_recuperarDatosCita.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA = New SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITADataTable
        Me.Tables.Add(Me.tableSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA)
    End Sub
    
    Private Function ShouldSerializeSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARowChangeEventHandler(ByVal sender As Object, ByVal e As SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITADataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnepis_key As DataColumn
        
        Private columnAgenda_seleccionada As DataColumn
        
        Private columnDia_seleccionado As DataColumn
        
        Private columnServicio_seleccionado As DataColumn
        
        Private columnMutua As DataColumn
        
        Private columnCove As DataColumn
        
        Private columnestado As DataColumn
        
        Friend Sub New()
            MyBase.New("SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property epis_keyColumn As DataColumn
            Get
                Return Me.columnepis_key
            End Get
        End Property
        
        Friend ReadOnly Property Agenda_seleccionadaColumn As DataColumn
            Get
                Return Me.columnAgenda_seleccionada
            End Get
        End Property
        
        Friend ReadOnly Property Dia_seleccionadoColumn As DataColumn
            Get
                Return Me.columnDia_seleccionado
            End Get
        End Property
        
        Friend ReadOnly Property Servicio_seleccionadoColumn As DataColumn
            Get
                Return Me.columnServicio_seleccionado
            End Get
        End Property
        
        Friend ReadOnly Property MutuaColumn As DataColumn
            Get
                Return Me.columnMutua
            End Get
        End Property
        
        Friend ReadOnly Property CoveColumn As DataColumn
            Get
                Return Me.columnCove
            End Get
        End Property
        
        Friend ReadOnly Property estadoColumn As DataColumn
            Get
                Return Me.columnestado
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARow
            Get
                Return CType(Me.Rows(index),SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARow)
            End Get
        End Property
        
        Public Event SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARowChanged As SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARowChangeEventHandler
        
        Public Event SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARowChanging As SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARowChangeEventHandler
        
        Public Event SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARowDeleted As SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARowChangeEventHandler
        
        Public Event SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARowDeleting As SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARowChangeEventHandler
        
        Public Overloads Sub AddSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARow(ByVal row As SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARow(ByVal epis_key As Integer, ByVal Agenda_seleccionada As String, ByVal Dia_seleccionado As Date, ByVal Servicio_seleccionado As String, ByVal Mutua As String, ByVal Cove As String, ByVal estado As String) As SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARow
            Dim rowSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARow As SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARow = CType(Me.NewRow,SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARow)
            rowSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARow.ItemArray = New Object() {epis_key, Agenda_seleccionada, Dia_seleccionado, Servicio_seleccionado, Mutua, Cove, estado}
            Me.Rows.Add(rowSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARow)
            Return rowSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITADataTable = CType(MyBase.Clone,SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITADataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITADataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnepis_key = Me.Columns("epis_key")
            Me.columnAgenda_seleccionada = Me.Columns("Agenda_seleccionada")
            Me.columnDia_seleccionado = Me.Columns("Dia_seleccionado")
            Me.columnServicio_seleccionado = Me.Columns("Servicio_seleccionado")
            Me.columnMutua = Me.Columns("Mutua")
            Me.columnCove = Me.Columns("Cove")
            Me.columnestado = Me.Columns("estado")
        End Sub
        
        Private Sub InitClass()
            Me.columnepis_key = New DataColumn("epis_key", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnepis_key)
            Me.columnAgenda_seleccionada = New DataColumn("Agenda_seleccionada", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAgenda_seleccionada)
            Me.columnDia_seleccionado = New DataColumn("Dia_seleccionado", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDia_seleccionado)
            Me.columnServicio_seleccionado = New DataColumn("Servicio_seleccionado", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnServicio_seleccionado)
            Me.columnMutua = New DataColumn("Mutua", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMutua)
            Me.columnCove = New DataColumn("Cove", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCove)
            Me.columnestado = New DataColumn("estado", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnestado)
            Me.columnepis_key.AllowDBNull = false
            Me.columnAgenda_seleccionada.AllowDBNull = false
            Me.columnDia_seleccionado.AllowDBNull = false
            Me.columnServicio_seleccionado.AllowDBNull = false
            Me.columnMutua.AllowDBNull = false
            Me.columnestado.AllowDBNull = false
        End Sub
        
        Public Function NewSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARow() As SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARow
            Return CType(Me.NewRow,SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARowChangedEvent) Is Nothing) Then
                RaiseEvent SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARowChanged(Me, New SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARowChangeEvent(CType(e.Row,SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARowChangingEvent) Is Nothing) Then
                RaiseEvent SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARowChanging(Me, New SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARowChangeEvent(CType(e.Row,SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARowDeletedEvent) Is Nothing) Then
                RaiseEvent SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARowDeleted(Me, New SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARowChangeEvent(CType(e.Row,SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARowDeletingEvent) Is Nothing) Then
                RaiseEvent SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARowDeleting(Me, New SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARowChangeEvent(CType(e.Row,SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARow(ByVal row As SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARow
        Inherits DataRow
        
        Private tableSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA As SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITADataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA = CType(Me.Table,SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITADataTable)
        End Sub
        
        Public Property epis_key As Integer
            Get
                Return CType(Me(Me.tableSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA.epis_keyColumn),Integer)
            End Get
            Set
                Me(Me.tableSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA.epis_keyColumn) = value
            End Set
        End Property
        
        Public Property Agenda_seleccionada As String
            Get
                Return CType(Me(Me.tableSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA.Agenda_seleccionadaColumn),String)
            End Get
            Set
                Me(Me.tableSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA.Agenda_seleccionadaColumn) = value
            End Set
        End Property
        
        Public Property Dia_seleccionado As Date
            Get
                Return CType(Me(Me.tableSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA.Dia_seleccionadoColumn),Date)
            End Get
            Set
                Me(Me.tableSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA.Dia_seleccionadoColumn) = value
            End Set
        End Property
        
        Public Property Servicio_seleccionado As String
            Get
                Return CType(Me(Me.tableSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA.Servicio_seleccionadoColumn),String)
            End Get
            Set
                Me(Me.tableSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA.Servicio_seleccionadoColumn) = value
            End Set
        End Property
        
        Public Property Mutua As String
            Get
                Return CType(Me(Me.tableSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA.MutuaColumn),String)
            End Get
            Set
                Me(Me.tableSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA.MutuaColumn) = value
            End Set
        End Property
        
        Public Property Cove As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA.CoveColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA.CoveColumn) = value
            End Set
        End Property
        
        Public Property estado As String
            Get
                Return CType(Me(Me.tableSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA.estadoColumn),String)
            End Get
            Set
                Me(Me.tableSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA.estadoColumn) = value
            End Set
        End Property
        
        Public Function IsCoveNull() As Boolean
            Return Me.IsNull(Me.tableSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA.CoveColumn)
        End Function
        
        Public Sub SetCoveNull()
            Me(Me.tableSP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITA.CoveColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SP_CIMACEX_RECUPERAR_DATOS_MOSTRAR_CITARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
